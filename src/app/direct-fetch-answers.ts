/**
 * Correctif pour le probl√®me de discordance entre les IDs des questions et les indices
 * 
 * Ce fichier contient des fonctions d'aide qui peuvent √™tre utilis√©es pour r√©soudre
 * les probl√®mes de synchronisation entre les IDs des questions et les indices utilis√©s
 * dans l'application quiz.
 */

/**
 * R√©cup√®re toutes les r√©ponses pour toutes les questions directement depuis l'API
 * en contournant le syst√®me de cache et en utilisant les IDs corrects.
 * 
 * @param apiUrl L'URL de base de l'API (normalement environment.apiUrl)
 * @param questions La liste des questions avec leurs IDs
 * @returns Une promesse qui se r√©sout en un tableau de documents de r√©ponses
 */
export async function fetchAllAnswersDirectly(apiUrl: string, questions: any[]): Promise<any[]> {
  const answersDocs: any[] = [];
  console.log(`[DIRECT-FETCH] üöÄ R√©cup√©ration directe des r√©ponses pour ${questions.length} questions`);
  
  // Pour chaque question, r√©cup√©rer les r√©ponses par ID et par index
  for (let i = 0; i < questions.length; i++) {
    const question = questions[i];
    const questionId = question?.id;
    
    if (questionId === undefined) {
      console.warn(`[DIRECT-FETCH] ‚ö†Ô∏è Question √† l'index ${i} n'a pas d'ID d√©fini`);
      continue;
    }
    
    console.log(`[DIRECT-FETCH] üìù Question ${i} (ID: ${questionId})`);
    
    try {
      // R√©cup√©rer les r√©ponses par l'ID de la question
      const responseById = await fetch(`${apiUrl}/answers/${questionId}`);
      const dataById = await responseById.json();
      
      if (dataById && dataById.answers && dataById.answers.length > 0) {
        console.log(`[DIRECT-FETCH] ‚úÖ R√©ponses trouv√©es par ID=${questionId}: ${dataById.answers.length} r√©ponses`);
        answersDocs.push({
          id: questionId,
          questionId: questionId,
          index: i,
          answers: dataById.answers,
          source: 'id'
        });
        // On a trouv√© des r√©ponses, on peut passer √† la question suivante
        continue;
      }
      
      // Si pas de r√©ponses par ID, essayer par index
      const responseByIndex = await fetch(`${apiUrl}/answers/${i}`);
      const dataByIndex = await responseByIndex.json();
      
      if (dataByIndex && dataByIndex.answers && dataByIndex.answers.length > 0) {
        console.log(`[DIRECT-FETCH] ‚úÖ R√©ponses trouv√©es par index=${i}: ${dataByIndex.answers.length} r√©ponses`);
        answersDocs.push({
          id: i,
          questionId: questionId,
          index: i,
          answers: dataByIndex.answers,
          source: 'index'
        });
        continue;
      }
      
      // Aucune r√©ponse trouv√©e pour cette question
      console.log(`[DIRECT-FETCH] ‚ÑπÔ∏è Aucune r√©ponse trouv√©e pour la question ${i} (ID: ${questionId})`);
      answersDocs.push({
        id: questionId,
        questionId: questionId,
        index: i,
        answers: [],
        source: 'empty'
      });
      
    } catch (error) {
      console.error(`[DIRECT-FETCH] ‚ùå Erreur lors de la r√©cup√©ration des r√©ponses pour la question ${i} (ID: ${questionId}):`, error);
      answersDocs.push({
        id: questionId,
        questionId: questionId,
        index: i,
        answers: [],
        error: true
      });
    }
  }
  
  console.log(`[DIRECT-FETCH] üìä R√©cup√©ration termin√©e: ${answersDocs.length} documents de r√©ponses`);
  return answersDocs;
}