import { User } from './models/user.model';
import { Component, OnInit, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { Subscription, interval, take } from 'rxjs';
import { Question } from './models/question.model';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { QuizService, QuizStep } from './services/quiz-secure.service';
import { WebSocketTimerService } from './services/websocket-timer.service';
import { environment } from '../environments/environment';
import { UserStateService } from './services/user-state.service';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-quiz',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './quiz.component.html',
  styleUrls: ['./quiz.component.css']
})
export class QuizComponent implements OnInit, OnDestroy {
  
  // Propri√©t√©s d'√©tat du quiz
  public answerSubmitted: boolean = false;
  private justSubmitted: boolean = false;
  leaderboard: User[] = [];
  avatarUrl: string | null = null;
  goodAnswersTimes: number[] = [];
  currentIndex: number = 0;
  currentQuestion: Question | null = null;
  selectedAnswerIndex: number | null = null;
  isAnswerCorrect: boolean | null = null;
  quizFinished = false;
  
  // Syst√®me de loading pour les transitions synchronis√©es
  isLoading: boolean = false;
  loadingMessage: string = '';
  loadingType: string = '';
  
  // Timer properties
  timerValue: number = 15;
  timerMax: number = 15;
  timerPercent: number = 100;
  timerActive: boolean = false;
  waitingForStart: boolean = false;
  private timerQuestionIndex: number = -1;
  public questionStartTime: number = 0; // Public pour le template
  private timerCountdownSub?: Subscription;
  
  // Souscriptions WebSocket
  private websocketTimerSub?: Subscription;
  private stepTransitionSub?: Subscription;
  private stepActivationSub?: Subscription;
  private questionsSyncSub?: Subscription;
  private quizStateUnsub?: () => void;
  private lastQuestionIndex: number = -1;
  private lastStep: QuizStep | null = null;
  private subscriptions: Subscription[] = []; // CORRECTION: Collection de toutes les souscriptions
  
  // Donn√©es utilisateur
  userId: string = '';
  userName: string = '';
  step: QuizStep = 'lobby';
  webSocketStep: string | null = null;  // ‚úÖ AJOUT: √âtape re√ßue via WebSocket
  answers: any[] = [];
  personalScore: { good: number, bad: number, none: number } = { good: 0, bad: 0, none: 0 };
  totalScore: number = 0;
  questionResults: { good: number, bad: number, none: number }[] = [];
  private scoredQuestions: Set<number> = new Set(); // Pour √©viter la double incr√©mentation
  answersSub?: Subscription;

  // ‚úÖ PROTECTION VOTE: Tracker les questions d√©j√† r√©pondues
  public answeredQuestions: Set<number> = new Set();

  // Cl√© de stockage pour l'√©tat du joueur
  private readonly PLAYER_STATE_KEY = 'quiz_player_state';

  constructor(
    private quizService: QuizService, 
    private router: Router, 
    private cdr: ChangeDetectorRef,
    private websocketTimerService: WebSocketTimerService,
    private userStateService: UserStateService,
    private http: HttpClient
  ) { }

  ngOnInit(): void {
    // Utiliser notre service pour r√©cup√©rer les informations utilisateur
    const userData = this.userStateService.getUserInfo();
    if (userData) {
      this.userId = userData.id || '';
      this.userName = userData.name || '';
      this.avatarUrl = userData.avatarUrl || null;
    } else {
      // Fallback vers le localStorage pour la compatibilit√©
      this.avatarUrl = localStorage.getItem('avatarUrl');
    }
    
    this.quizService.initQuestions();
    
    // S'abonner aux changements de questions
    this.subscribeToQuestionsChanges();
    
    // Restaurer l'√©tat du joueur s'il existe
    const stateRestored = this.restorePlayerState();
    if (stateRestored) {
      console.log('[PLAYER-STATE] √âtat restaur√© avec succ√®s au d√©marrage');
    }
    
    this.subscribeAnswers();

    // ‚úÖ S'abonner aux mises √† jour WebSocket du timer
    this.websocketTimerSub = this.websocketTimerService.getCountdown().subscribe(timerState => {
      console.log('[PLAYER-TIMER-WS] Timer state re√ßu:', {
        questionStartTime: timerState.questionStartTime,
        timeRemaining: timerState.timeRemaining,
        isActive: timerState.isActive,
        step: timerState.step,  // ‚úÖ NOUVEAU: √âtape re√ßue via WebSocket
        localStep: this.step
      });

      // ‚úÖ CORRECTION: Sauvegarder et utiliser l'√©tape re√ßue du serveur via WebSocket
      if (timerState.step) {
        this.webSocketStep = timerState.step;
      }
      const currentStep = this.webSocketStep || this.step;

      // üö® Correction critique : forcer l'arr√™t du timer si l'√©tape n'est plus 'question'
      if (currentStep !== 'question') {
        if (this.timerActive) {
          console.log('[PLAYER-TIMER-WS][FORCE-STOP] √âtape != question, arr√™t forc√© du timer. √âtape courante :', currentStep);
        }
        this.timerActive = false;
        this.stopTimer();
        // On peut garder la valeur du timer pour affichage, mais il ne doit plus tourner ni permettre de jouer
        this.cdr.detectChanges();
        return;
      }

      // ‚úÖ CORRECTION: Permettre aux joueurs en retard de savoir qu'une question √©tait/est active
      // M√™me si on arrive pendant 'result', on doit pouvoir identifier qu'une question √©tait en cours
      if (timerState.questionStartTime && timerState.questionStartTime > 0) {
        this.questionStartTime = timerState.questionStartTime;
        const oldTimerValue = this.timerValue;
        this.timerValue = timerState.timeRemaining;
        this.timerPercent = (timerState.timeRemaining / (timerState.timerMax || 20)) * 100;
        
        // ‚úÖ FIX MOBILE: Toujours activer le timer si questionStartTime > 0, m√™me si isActive est faux
        // Certains appareils mobiles peuvent avoir des probl√®mes √† recevoir correctement isActive
        this.timerActive = true; // Activer syst√©matiquement si questionStartTime > 0
        this.timerMax = timerState.timerMax;

        console.log('[PLAYER-TIMER-WS] ‚úÖ Timer activ√©, questionStartTime mis √† jour:', {
          questionStartTime: this.questionStartTime,
          canPlay: this.canPlay,
          timeRemaining: this.timerValue,
          currentStep: currentStep,
          stepFromWS: timerState.step,
          webSocketStep: this.webSocketStep,
          localStep: this.step,
          deviceType: this.getMobileDeviceInfo() // Nouveau: info sur l'appareil
        });

        // Forcer la d√©tection de changements pour r√©activer les boutons
        this.cdr.detectChanges();

        // Gestion de l'expiration automatique
        if (this.timerValue <= 0) { // Retir√© la d√©pendance sur timerActive
          this.handleTimerExpired();
        }

        console.log('üîÑ WebSocket Timer Update (manuel d√©marr√©):', {
          serverStartTime: timerState.questionStartTime,
          timeRemaining: timerState.timeRemaining,
          isActive: timerState.isActive,
          oldValue: oldTimerValue,
          newValue: this.timerValue,
          forcedActive: true // Toujours actif si questionStartTime > 0
        });
      } else {
        // Timer pas encore d√©marr√© manuellement OU questionStartTime invalide, rester en attente
        this.timerActive = false;
        this.timerValue = timerState.timerMax || 20;
        this.timerPercent = 100;
        this.questionStartTime = 0; // Force √† 0 peu importe la valeur re√ßue
        console.log('‚è∏Ô∏è Timer en attente - questionStartTime re√ßu:', timerState.questionStartTime, 'forc√© √† 0, canPlay =', this.canPlay);
      }
    });

    // ‚úÖ S'abonner aux transitions d'√©tapes synchronis√©es via WebSocket
    this.stepTransitionSub = this.websocketTimerService.getStepTransitions().subscribe(transitionData => {
      console.log('[STEP-WS] Transition re√ßue:', transitionData);
      this.showLoadingForTransition(transitionData.fromStep as QuizStep, transitionData.toStep as QuizStep);
    });

    this.stepActivationSub = this.websocketTimerService.getStepActivations().subscribe(activationData => {
      console.log('[STEP-WS] Activation re√ßue:', activationData);
      this.step = activationData.step as QuizStep;
      this.isLoading = false;
      
      // Actions sp√©cifiques aux √©tapes apr√®s activation synchronis√©e
      this.handleStepActivation(activationData.step as QuizStep);
      
      this.cdr.detectChanges();
    });

    // CORRECTION: S'abonner aux messages de reset du quiz
    const quizResetSub = this.websocketTimerService.getQuizResets().subscribe(resetData => {
      console.log('[QUIZ] Message de reset du quiz re√ßu via WebSocket:', resetData);
      
      if (resetData.action === 'reset-all') {
        // Nettoyer l'√©tat local et les r√©ponses
        this.selectedAnswerIndex = null;
        this.totalScore = 0;
        this.scoredQuestions.clear();
        this.answeredQuestions.clear();
        
        // Nettoyer les caches locaux
        try {
          localStorage.removeItem(this.PLAYER_STATE_KEY);
          localStorage.removeItem('quiz-user');
          localStorage.removeItem('quiz_answers');
        } catch (e) {
          console.warn('[QUIZ] Erreur lors du nettoyage des caches:', e);
        }
        
        // Forcer une redirection vers la page de login pour un reset complet
        this.router.navigate(['/login']);
        
        console.log('[QUIZ] Nettoyage complet et redirection suite au message de reset');
      }
    });
    this.subscriptions.push(quizResetSub);
    
    // ‚úÖ S'abonner aux notifications de synchronisation des questions
    this.questionsSyncSub = this.websocketTimerService.getQuestionsSync().subscribe(async syncData => {
      console.log('[QUESTIONS-WS] Synchronisation re√ßue:', syncData);
      // Gestion structure imbriqu√©e (comme c√¥t√© pr√©sentation)
      let actionValue = syncData.action;
      const rawData = syncData as any;
      if (!actionValue && rawData.data && rawData.data.action) {
        actionValue = rawData.data.action;
        console.log('[QUESTIONS-WS] Action extraite de structure imbriqu√©e:', actionValue);
      }
      console.log('[QUESTIONS-WS] Action finale:', actionValue);
      if (actionValue === 'reload') {
        try {
          console.log('[QUESTIONS-WS] Rechargement des questions demand√©...');
          // Forcer le rechargement des questions
          await this.quizService.reloadQuestions();
          // Mettre √† jour la question courante
          const newCurrentQuestion = this.quizService.getCurrentQuestion(this.currentIndex);
          if (newCurrentQuestion) {
            this.currentQuestion = newCurrentQuestion;
            console.log('[QUESTIONS-WS] Question courante mise √† jour:', {
              index: this.currentIndex,
              text: newCurrentQuestion.text?.substring(0, 50) + '...'
            });
          }
          this.cdr.detectChanges();
        } catch (error) {
          console.error('[QUESTIONS-WS] Erreur lors du rechargement des questions:', error);
        }
      }
    });

    // AJOUT: V√©rification p√©riodique des questions (solution de contournement)
    this.startPeriodicQuestionsCheck();

    // Fallback pour les changements d'√©tapes sans WebSocket
    this.quizService.getStep().subscribe((step: QuizStep) => {
      if (this.step === step) {
        return;
      }
      console.log('[STEP-FALLBACK] Changement d\'√©tape direct:', this.step, '->', step);
      this.step = step;
      this.handleStepActivation(step);
    });
    
    // Check forc√© p√©riodique pour d√©tecter les resets (toutes les 5 secondes)
    setInterval(async () => {
      try {
        const currentStep = await this.quizService.forceCheckState();
        if (currentStep === 'lobby' && this.step !== 'lobby') {
          console.log('[FORCE-CHECK] Reset d√©tect√© via check p√©riodique, redirection vers lobby');
          this.step = 'lobby';
          this.handleStepActivation('lobby');
        }
      } catch (error) {
        // Ignorer les erreurs de check p√©riodique
      }
    }, 5000);
    
    // Gestion des changements d'index de question
    // Note: On a d√©j√† r√©cup√©r√© les donn√©es utilisateur dans ngOnInit
    this.quizService.getCurrentIndex().subscribe(idx => {
      if (this.currentIndex === idx) {
        return;
      }
      console.log('[INDEX] Changement vers nouvelle question:', this.currentIndex, '->', idx);
      this.currentIndex = idx;
      this.currentQuestion = this.quizService.getCurrentQuestion(idx);
      
      // Reset states pour nouvelle question
      this.answerSubmitted = false;
      this.justSubmitted = false;
      this.selectedAnswerIndex = null;
      this.isAnswerCorrect = null;
      this.questionStartTime = 0; // IMPORTANT: R√©initialiser le timer pour nouvelle question
      this.timerActive = false;
      
      console.log('[INDEX] √âtats r√©initialis√©s pour nouvelle question:', {
        currentIndex: this.currentIndex,
        selectedAnswerIndex: this.selectedAnswerIndex,
        answerSubmitted: this.answerSubmitted,
        questionStartTime: this.questionStartTime
      });
      
      // ‚úÖ NOUVEAU: Forcer la d√©tection de changements apr√®s reset
      this.cdr.detectChanges();
      
      this.savePlayerState();
    });
  }

  // S'abonner aux changements de questions
  private subscribeToQuestionsChanges() {
    const questionsSub = this.quizService.questions$.subscribe(questions => {
      if (questions.length > 0) {
        console.log(`[PLAYER-QUESTIONS] Nouvelle liste de questions re√ßue: ${questions.length} questions`);
        
        // Mettre √† jour la question courante si elle a chang√©
        const newCurrentQuestion = this.quizService.getCurrentQuestion(this.currentIndex);
        if (newCurrentQuestion && 
            (!this.currentQuestion || this.currentQuestion.id !== newCurrentQuestion.id)) {
          
          console.log(`[PLAYER-QUESTIONS] Question ${this.currentIndex} mise √† jour:`, {
            ancien: this.currentQuestion?.text?.substring(0, 50) + '...',
            nouveau: newCurrentQuestion.text?.substring(0, 50) + '...'
          });
          
          this.currentQuestion = newCurrentQuestion;
          
          // Reset l'√©tat de la question si on √©tait en cours de r√©ponse
          if (this.step === 'question' && !this.answerSubmitted) {
            this.selectedAnswerIndex = null;
            this.isAnswerCorrect = null;
          }
        }
      }
    });
    
    // Pas besoin de g√©rer la souscription car elle sera automatiquement nettoy√©e √† la destruction du composant
  }

  private subscribeAnswers() {
    if (this.answersSub) this.answersSub.unsubscribe();
    this.answersSub = this.quizService.getAnswers$(this.currentIndex).subscribe(answers => {
      this.answers = answers;
    });
  }

  startTimer() {
    this.stopTimer();
    this.timerActive = true;
    this.timerValue = this.timerMax;
    this.timerPercent = 100;
    this.timerQuestionIndex = this.currentIndex;
    this.questionStartTime = Date.now();
    
    console.log('[TIMER] Timer d√©marr√© pour question', this.currentIndex);
  }

  stopTimer() {
    if (this.timerCountdownSub) {
      this.timerCountdownSub.unsubscribe();
    }
    this.timerActive = false;
    console.log('[TIMER] Timer arr√™t√©');
  }

  private handleTimerExpired(): void {
    console.log('[TIMER] Timer expir√© !');
    if (this.answerSubmitted || !this.timerActive) {
      return;
    }

    this.timerActive = false;
    this.stopTimer();
    
    // Auto-submit sans r√©ponse si pas encore soumis
    if (!this.answerSubmitted) {
      this.selectAnswer(-1); // -1 = pas de r√©ponse
    }
    
    // ‚úÖ NOUVEAU: Forcer l'affichage des r√©sultats c√¥t√© joueur
    console.log('[TIMER-EXPIRED] Forcer affichage r√©sultats c√¥t√© joueur');
    this.forceShowResults();
  }

  selectAnswer(index: number) {
    // ‚úÖ PROTECTION VOTE: V√©rifier si d√©j√† r√©pondu √† cette question
    if (this.answeredQuestions.has(this.currentIndex)) {
      console.log('[VOTE-PROTECTION] ‚ùå Question d√©j√† r√©pondue, vote bloqu√© c√¥t√© frontend');
      return;
    }
    
    // Logs de d√©bogage pour comprendre pourquoi les boutons ne fonctionnent pas
    console.log('[SELECT] Tentative s√©lection:', {
      index: index,
      answerSubmitted: this.answerSubmitted,
      questionStartTime: this.questionStartTime,
      step: this.step,
      canPlay: this.canPlay,
      currentIndex: this.currentIndex,
      alreadyAnswered: this.answeredQuestions.has(this.currentIndex)
    });
    
    if (this.answerSubmitted) {
      console.log('[SELECT] Bloqu√© - r√©ponse d√©j√† soumise');
      return;
    }

    console.log('[SELECT] R√©ponse s√©lectionn√©e:', index);
    this.selectedAnswerIndex = index;
    
    // ‚úÖ DEBUG: Forcer la d√©tection de changements pour s'assurer que les classes CSS sont appliqu√©es
    this.cdr.detectChanges();
    
    console.log('[SELECT] √âtat apr√®s s√©lection:', {
      selectedAnswerIndex: this.selectedAnswerIndex,
      step: this.step,
      webSocketStep: this.webSocketStep,
      currentIndex: this.currentIndex,
      answerSubmitted: this.answerSubmitted
    });
    
    if (this.currentQuestion) {
      this.isAnswerCorrect = index === this.currentQuestion.correctIndex;
      console.log('[SELECT] R√©ponse correcte?', this.isAnswerCorrect);
    }

    this.submitAnswer(index);
  }

  async submitAnswer(answerIndex: number) {
    if (this.answerSubmitted) {
      console.log('[VOTE-PROTECTION] ‚ùå Tentative de vote multiple bloqu√©e c√¥t√© frontend');
      return;
    }

    this.answerSubmitted = true;
    this.justSubmitted = true;

    console.log('[SUBMIT] ‚úÖ AVANT soumission - selectedAnswerIndex:', this.selectedAnswerIndex, 'answerIndex:', answerIndex);

    try {
      await this.quizService.submitAnswer(this.userId, answerIndex, this.userName, this.currentIndex);
      console.log('[SUBMIT] ‚úÖ R√©ponse soumise avec succ√®s');
      
      // ‚úÖ PROTECTION VOTE: Marquer cette question comme r√©pondue
      this.answeredQuestions.add(this.currentIndex);
      console.log('[VOTE-PROTECTION] Question', this.currentIndex, 'marqu√©e comme r√©pondue');
      
      // ‚úÖ DEBUG CRITIQUE: V√©rifier que selectedAnswerIndex est toujours correct
      console.log('[SUBMIT] ‚úÖ APR√àS soumission - selectedAnswerIndex:', this.selectedAnswerIndex, 'devrait √™tre:', answerIndex);
      
    } catch (error: any) {
      console.error('[SUBMIT] Erreur lors de la soumission:', error);
      
      // ‚úÖ PROTECTION: G√©rer sp√©cifiquement le cas du vote d√©j√† effectu√©
      if (error.message === 'ALREADY_VOTED') {
        console.log('[VOTE-PROTECTION] ‚ö†Ô∏è Vote d√©j√† effectu√© pour cette question - maintenir answerSubmitted = true');
        // Ne PAS remettre answerSubmitted √† false car l'utilisateur a effectivement d√©j√† vot√©
        alert('Vous avez d√©j√† vot√© pour cette question !');
        return;
      }
      
      // Pour toute autre erreur, permettre une nouvelle tentative
      this.answerSubmitted = false;
      return;
    }

    // Ne PAS calculer le score imm√©diatement - attendre l'√©tape 'result'
    console.log('[SUBMIT] R√©ponse soumise, score sera calcul√© lors de la r√©v√©lation des r√©sultats');

    this.savePlayerState();
  }

  // Calculer le score pour la question courante (appel√© lors de la r√©v√©lation des r√©sultats)
  private calculateScoreForCurrentQuestion() {
    // V√©rifier si le score a d√©j√† √©t√© calcul√© pour cette question
    if (this.scoredQuestions.has(this.currentIndex)) {
      console.log('[SCORE] Score d√©j√† calcul√© pour la question', this.currentIndex, ', ignorer');
      return;
    }

    if (this.currentQuestion && this.selectedAnswerIndex !== null && this.selectedAnswerIndex >= 0) {
      const isCorrect = this.selectedAnswerIndex === this.currentQuestion.correctIndex;
      
      if (isCorrect) {
        this.totalScore++;
        console.log('[SCORE] Point ajout√© lors de la r√©v√©lation des r√©sultats:', this.totalScore);
        
        // CORRECTION: Envoyer le score mis √† jour au serveur pour la synchronisation
        this.sendScoreToServer(this.totalScore, this.currentIndex);
      } else {
        console.log('[SCORE] R√©ponse incorrecte, pas de point ajout√©');
      }

      // Marquer que le score a √©t√© calcul√© pour cette question
      this.scoredQuestions.add(this.currentIndex);
    } else {
      console.log('[SCORE] Aucune r√©ponse ou r√©ponse invalide, pas de point ajout√©');
      // M√™me si pas de r√©ponse, marquer comme calcul√© pour √©viter les re-calculs
      this.scoredQuestions.add(this.currentIndex);
    }
  }

  // M√©thode pour recalculer le score lors de la restauration (autorise le recalcul)
  private recalculateScoreForQuestion(questionIndex: number, userAnswerIndex: number): boolean {
    const question = this.quizService.getCurrentQuestion(questionIndex);
    
    if (question && userAnswerIndex === question.correctIndex) {
      console.log(`[RESTORE-CALC] Question ${questionIndex} correcte`);
      return true;
    } else {
      console.log(`[RESTORE-CALC] Question ${questionIndex} incorrecte ou invalide`);
      return false;
    }
  }

  // Syst√®me de loading pour les transitions synchronis√©es
  private showLoadingForTransition(fromStep: QuizStep, toStep: QuizStep) {
    // Affichage loading seulement pour les transitions importantes
    if (this.shouldShowLoadingForTransition(fromStep, toStep)) {
      this.isLoading = true;
      this.loadingType = this.getTransitionType(fromStep, toStep);
      this.loadingMessage = this.getLoadingMessage(this.loadingType);
      console.log('[LOADING] Transition:', fromStep, '->', toStep, 'Type:', this.loadingType);
    }
  }

  private shouldShowLoadingForTransition(fromStep: QuizStep, toStep: QuizStep): boolean {
    // Loading seulement pour les transitions majeures
    const majorTransitions = [
      'lobby->waiting',
      'waiting->question', 
      'question->result',
      'result->question',
      'result->end'
    ];
    
    const transitionKey = `${fromStep}->${toStep}`;
    return majorTransitions.includes(transitionKey);
  }

  private getTransitionType(fromStep: QuizStep, toStep: QuizStep): string {
    if (toStep === 'question') return 'question-start';
    if (toStep === 'result') return 'question-result';
    if (toStep === 'waiting') return 'next-question';
    if (toStep === 'end') return 'quiz-end';
    return 'transition';
  }

  private getLoadingMessage(type: string): string {
    switch (type) {
      case 'question-start': return 'Question suivante...';
      case 'question-result': return 'R√©sultats...';
      case 'next-question': return 'Pr√©paration...';
      case 'quiz-end': return 'Termin√© !';
      default: return 'Synchronisation...';
    }
  }

  // Gestion des actions sp√©cifiques lors de l'activation synchronis√©e des √©tapes
  private handleStepActivation(step: QuizStep) {
    console.log('[STEP-ACTIVATION] Traitement de l\'√©tape:', step);
    
    if (step === 'lobby') {
      console.log('[QUIZ] Reset d√©tect√©, nettoyage et redirection vers login');
      this.userStateService.clearUserInfo();
      localStorage.removeItem(this.PLAYER_STATE_KEY);
      
      this.router.navigate(['/login']);
      this.totalScore = 0;
      this.questionResults = [];
      this.scoredQuestions.clear(); // Nettoyer le suivi des scores
      this.answeredQuestions.clear(); // ‚úÖ PROTECTION VOTE: Nettoyer les questions r√©pondues
      this.personalScore = { good: 0, bad: 0, none: 0 };
      this.goodAnswersTimes = [];
      this.selectedAnswerIndex = null;
      this.answerSubmitted = false;
      this.quizFinished = false;
    } else if (step === 'end') {
      this.quizFinished = true;
      this.stopTimer();
    } else if (step === 'result') {
      this.timerActive = false;
      this.stopTimer();
      
      // Calculer le score maintenant que les r√©sultats sont r√©v√©l√©s
      this.calculateScoreForCurrentQuestion();
    } else if (step === 'question') {
      this.currentQuestion = this.quizService.getCurrentQuestion(this.currentIndex);
      // IMPORTANT: R√©initialiser le timer pour chaque nouvelle question
      this.questionStartTime = 0;
      this.timerActive = false;
      console.log('[STEP-ACTIVATION] Question activ√©e, timer r√©initialis√©, questionStartTime = 0');
    }
    
    this.savePlayerState();
  }

  // Sauvegarde et restauration de l'√©tat du joueur
  private savePlayerState() {
    const playerState = {
      userId: this.userId,
      userName: this.userName,
      currentIndex: this.currentIndex,
      step: this.step,
      selectedAnswerIndex: this.selectedAnswerIndex,
      answerSubmitted: this.answerSubmitted,
      isAnswerCorrect: this.isAnswerCorrect,
      totalScore: this.totalScore,
      personalScore: this.personalScore,
      scoredQuestions: Array.from(this.scoredQuestions),
      answeredQuestions: Array.from(this.answeredQuestions), // ‚úÖ PROTECTION VOTE: Sauvegarder questions r√©pondues
      timestamp: Date.now()
    };

    try {
      localStorage.setItem(this.PLAYER_STATE_KEY, JSON.stringify(playerState));
      console.log('[SAVE-STATE] √âtat sauvegard√©:', {
        currentIndex: playerState.currentIndex,
        selectedAnswerIndex: playerState.selectedAnswerIndex,
        answerSubmitted: playerState.answerSubmitted,
        answeredQuestions: this.answeredQuestions.size
      });
    } catch (error) {
      console.error('[SAVE-STATE] Erreur sauvegarde √©tat:', error);
    }
  }

  private restorePlayerState(): boolean {
    try {
      const savedData = localStorage.getItem(this.PLAYER_STATE_KEY);
      if (!savedData) return false;

      const playerState = JSON.parse(savedData);
      
      // V√©rifier la validit√© de l'√©tat (pas trop ancien)
      const maxAge = 30 * 60 * 1000; // 30 minutes
      if (Date.now() - playerState.timestamp > maxAge) {
        localStorage.removeItem(this.PLAYER_STATE_KEY);
        return false;
      }

      // Restaurer l'√©tat de base
      this.userId = playerState.userId || '';
      this.userName = playerState.userName || '';
      const savedQuestionIndex = playerState.currentIndex || 0;
      this.currentIndex = savedQuestionIndex;
      
      // ‚úÖ CORRECTION: Ne restaurer selectedAnswerIndex que si on est sur la m√™me question
      if (savedQuestionIndex === this.currentIndex) {
        // ‚úÖ CORRECTION TYPE: S'assurer que selectedAnswerIndex est un nombre valide ou null
        const savedAnswerIndex = playerState.selectedAnswerIndex;
        if (typeof savedAnswerIndex === 'number' && savedAnswerIndex >= 0) {
          this.selectedAnswerIndex = savedAnswerIndex;
        } else {
          this.selectedAnswerIndex = null;
        }
        
        this.answerSubmitted = playerState.answerSubmitted || false;
        this.isAnswerCorrect = playerState.isAnswerCorrect || null;
      } else {
        // Question diff√©rente - remettre √† z√©ro
        this.selectedAnswerIndex = null;
        this.answerSubmitted = false;
        this.isAnswerCorrect = null;
      }
      
      this.personalScore = playerState.personalScore || { good: 0, bad: 0, none: 0 };
      this.scoredQuestions = new Set(playerState.scoredQuestions || []);
      this.answeredQuestions = new Set(playerState.answeredQuestions || []); // ‚úÖ PROTECTION VOTE: Restaurer questions r√©pondues

      console.log('[RESTORE-STATE] √âtat de base restaur√©:', {
        currentIndex: this.currentIndex,
        answerSubmitted: this.answerSubmitted,
        userId: this.userId,
        answeredQuestions: this.answeredQuestions.size
      });

      // R√©cup√©rer les r√©ponses du serveur pour recalculer le score correct
      if (this.userId) {
        this.restoreScoreFromServer();
      } else {
        this.totalScore = playerState.totalScore || 0;
      }

      return true;
    } catch (error) {
      console.error('[RESTORE-STATE] Erreur restauration √©tat:', error);
      localStorage.removeItem(this.PLAYER_STATE_KEY);
      return false;
    }
  }

  private async restoreScoreFromServer() {
    try {
      console.log('[RESTORE-SCORE] R√©cup√©ration des r√©ponses du serveur pour recalculer le score...');
      
      // Attendre que les questions soient charg√©es
      await this.waitForQuestionsToLoad();
      
      const userAnswers = await this.quizService.getUserAnswers(this.userId);
      console.log('[RESTORE-SCORE] R√©ponses brutes r√©cup√©r√©es:', userAnswers);
      
      let calculatedScore = 0;
      const newScoredQuestions = new Set<number>();

      for (const answer of userAnswers) {
        const question = this.quizService.getCurrentQuestion(answer.questionIndex);
        console.log(`[RESTORE-SCORE] Question ${answer.questionIndex}:`, {
          question: question?.text?.substring(0, 50) + '...',
          userAnswerIndex: answer.answerIndex,
          correctIndex: question?.correctIndex,
          isCorrect: answer.answerIndex === question?.correctIndex,
          currentQuestionIndex: this.currentIndex
        });
        
        // ‚úÖ CORRECTION: Ne compter les points que pour les questions d√©j√† termin√©es (result r√©v√©l√©s)
        // Si c'est la question courante et qu'on n'est pas encore √† l'√©tape 'result', ne pas compter le point
        if (answer.questionIndex === this.currentIndex && this.step !== 'result' && this.step !== 'end') {
          console.log(`[RESTORE-SCORE] Question ${answer.questionIndex} est la question courante et pas encore √† l'√©tape result, point non compt√©`);
          // Marquer comme ayant une r√©ponse mais sans scorer pour l'instant
          // Le point sera ajout√© quand on atteindra l'√©tape 'result'
          continue;
        }
        
        if (question && answer.answerIndex === question.correctIndex) {
          calculatedScore++;
          newScoredQuestions.add(answer.questionIndex);
          console.log(`[RESTORE-SCORE] Question ${answer.questionIndex} correcte et termin√©e, score: ${calculatedScore}`);
        } else if (question) {
          // Marquer comme trait√©e m√™me si incorrecte (pour √©viter de la traiter plusieurs fois)
          newScoredQuestions.add(answer.questionIndex);
          console.log(`[RESTORE-SCORE] Question ${answer.questionIndex} incorrecte mais termin√©e`);
        }
      }

      this.totalScore = calculatedScore;
      this.scoredQuestions = newScoredQuestions;

      console.log(`[RESTORE-SCORE] Score final recalcul√©: ${this.totalScore}/${userAnswers.length}`);
      console.log(`[RESTORE-SCORE] Questions scor√©es:`, Array.from(this.scoredQuestions));
      console.log(`[RESTORE-SCORE] √âtape actuelle: ${this.step}, Question courante: ${this.currentIndex}`);

      // CORRECTION: Synchroniser le score recalcul√© avec le serveur
      if (this.totalScore > 0) {
        this.sendScoreToServer(this.totalScore, this.currentIndex);
      }
      
      // Sauvegarder l'√©tat mis √† jour
      this.savePlayerState();

    } catch (error) {
      console.error('[RESTORE-SCORE] Erreur lors de la restauration du score:', error);
      // En cas d'erreur, utiliser le score sauvegard√© localement
      const savedData = localStorage.getItem(this.PLAYER_STATE_KEY);
      if (savedData) {
        const playerState = JSON.parse(savedData);
        this.totalScore = playerState.totalScore || 0;
        console.log('[RESTORE-SCORE] Utilisation du score local sauvegard√©:', this.totalScore);
      }
    }
  }

  private async waitForQuestionsToLoad(): Promise<void> {
    return new Promise((resolve) => {
      const checkQuestions = () => {
        if (this.quizService.getQuestions().length > 0) {
          console.log('[RESTORE-SCORE] Questions charg√©es, nombre:', this.quizService.getQuestions().length);
          resolve();
        } else {
          console.log('[RESTORE-SCORE] En attente du chargement des questions...');
          setTimeout(checkQuestions, 100);
        }
      };
      checkQuestions();
    });
  }

  get totalQuestions(): number {
    return this.quizService.getQuestions().length;
  }

  get currentQuestionNumber(): string {
    const questionNum = (this.currentIndex + 1).toString().padStart(2, '0');
    const totalQuestions = this.totalQuestions.toString().padStart(2, '0');
    return `${questionNum} sur ${totalQuestions}`;
  }

  // ‚úÖ NOUVEAU: Forcer l'affichage des r√©sultats c√¥t√© joueur
  private forceShowResults(): void {
    console.log('[FORCE-RESULTS] Passage forc√© √† l\'√©tape result c√¥t√© joueur');
    
    // Changer localement l'√©tape pour afficher les r√©sultats
    this.step = 'result';
    this.webSocketStep = 'result';
    
    // Calculer le score pour la question courante
    this.calculateScoreForCurrentQuestion();
    
    // Forcer la d√©tection de changements
    this.cdr.detectChanges();
    
    // Sauvegarder l'√©tat
    this.savePlayerState();
  }

  // ‚úÖ NOUVEAU: Forcer le reset des √©tats si incoh√©rence d√©tect√©e
  private lastResetIndex: number = -1; // Pour √©viter les appels r√©p√©t√©s
  
  public forceResetIfNeeded(): string {
    // √âviter les appels r√©p√©t√©s pour le m√™me index
    if (this.lastResetIndex === this.currentIndex) {
      return '';
    }
    
    // Si selectedAnswerIndex n'est pas null mais qu'on n'a pas encore r√©pondu √† cette question
    if (this.selectedAnswerIndex !== null && !this.answeredQuestions.has(this.currentIndex)) {
      console.log('[FORCE-RESET] Incoh√©rence d√©tect√©e - reset forc√©:', {
        selectedAnswerIndex: this.selectedAnswerIndex,
        currentIndex: this.currentIndex,
        hasAnswered: this.answeredQuestions.has(this.currentIndex)
      });
      
      this.selectedAnswerIndex = null;
      this.answerSubmitted = false;
      this.isAnswerCorrect = null;
      this.lastResetIndex = this.currentIndex;
      this.cdr.detectChanges();
      return '';
    }
    
    // ‚úÖ NOUVEAU: Si on a r√©pondu mais selectedAnswerIndex est vide, restaurer depuis le serveur
    if (this.selectedAnswerIndex === null && this.answeredQuestions.has(this.currentIndex)) {
      console.log('[FORCE-RESTORE] Question r√©pondue mais selectedAnswerIndex null - restauration depuis serveur');
      this.restoreSelectedAnswerFromServer();
      this.lastResetIndex = this.currentIndex;
      return '';
    }
    
    return '';
  }

  // ‚úÖ NOUVEAU: Restaurer selectedAnswerIndex depuis le serveur pour les questions d√©j√† r√©pondues
  private async restoreSelectedAnswerFromServer(): Promise<void> {
    if (!this.userId || !this.answeredQuestions.has(this.currentIndex)) {
      return;
    }

    console.log('[RESTORE-SELECTION] Tentative de restauration de la s√©lection depuis le serveur pour question', this.currentIndex);
    
    try {
      const userAnswers = await this.quizService.getUserAnswers(this.userId);
      const answerForCurrentQuestion = userAnswers.find(a => a.questionIndex === this.currentIndex);
      
      if (answerForCurrentQuestion) {
        // ‚úÖ CORRECTION TYPE: S'assurer que answerIndex est un nombre valide
        const answerIndex = answerForCurrentQuestion.answerIndex;
        if (typeof answerIndex === 'number' && answerIndex >= 0) {
          this.selectedAnswerIndex = answerIndex;
        } else {
          console.warn('[RESTORE-SELECTION] ‚ö†Ô∏è answerIndex invalide:', answerIndex, typeof answerIndex);
          this.selectedAnswerIndex = null;
        }
        
        this.answerSubmitted = true;
        this.isAnswerCorrect = answerForCurrentQuestion.answerIndex === this.currentQuestion?.correctIndex;
        
        this.cdr.detectChanges();
        this.savePlayerState();
        
        // V√©rification finale pour s'assurer que la valeur est correctement assign√©e
        setTimeout(() => {
          if ((this.selectedAnswerIndex as any) === '') {
            const answerIndex = answerForCurrentQuestion.answerIndex;
            if (typeof answerIndex === 'number' && answerIndex >= 0) {
              this.selectedAnswerIndex = answerIndex;
              this.cdr.detectChanges();
            }
          }
        }, 100);
      }
    } catch (error) {
      console.error('[RESTORE-SELECTION] ‚ùå Erreur restauration depuis serveur:', error);
    }
  }

  // ‚úÖ NOUVEAU: Obtenir l'√©tape active (priorit√© au WebSocket)
  get activeStep(): QuizStep {
    return (this.webSocketStep as QuizStep) || this.step;
  }

  // ‚úÖ NOUVEAU: V√©rifier si on est en √©tape question ou r√©sultat
  get isQuestionOrResultStep(): boolean {
    const active = this.activeStep;
    return active === 'question' || active === 'result';
  }

  // V√©rifier si le joueur peut jouer (seulement quand le timer est d√©marr√© par le ma√Ætre)
  // ‚úÖ CORRECTION TYPE: Nettoyer selectedAnswerIndex si invalide
  private sanitizeSelectedAnswerIndex(): void {
    const value = this.selectedAnswerIndex as any;
    
    if (this.selectedAnswerIndex !== null && 
        (typeof this.selectedAnswerIndex !== 'number' || 
         this.selectedAnswerIndex < 0 || 
         value === '' || 
         isNaN(this.selectedAnswerIndex as any))) {
      
      // Si on a r√©pondu √† cette question, restaurer depuis le serveur
      if (this.answeredQuestions.has(this.currentIndex) && this.answerSubmitted) {
        this.restoreSelectedAnswerFromServer();
      } else {
        this.selectedAnswerIndex = null;
      }
      
      this.cdr.detectChanges();
    }
  }

  get canPlay(): boolean {
    // ‚úÖ CORRECTION TYPE: Nettoyer selectedAnswerIndex si invalide
    this.sanitizeSelectedAnswerIndex();
    
    // ‚úÖ PROTECTION VOTE: Ne pas permettre de jouer si d√©j√† r√©pondu √† cette question
    if (this.answeredQuestions.has(this.currentIndex)) {
      return false;
    }
    
    // ‚úÖ CORRECTION TIMER: Les joueurs ne peuvent jouer QUE si le timer est d√©marr√© c√¥t√© ma√Ætre
    const activeStep = this.webSocketStep || this.step;
    const isQuestionPhase = activeStep === 'question';
    
    // ‚úÖ FIX MOBILE: Assouplir la condition du timer actif pour √©viter les faux n√©gatifs
    // Sur certains appareils le flag timerActive peut √™tre incorrect alors que questionStartTime est correct
    const timerStarted = this.questionStartTime > 0; // Enlev√© la d√©pendance sur timerActive
    
    // Ajouter un log pour d√©boguer les probl√®mes sur les appareils mobiles
    console.log('[DEBUG][MOBILE-FIX] canPlay:', { 
      answerSubmitted: this.answerSubmitted,
      isQuestionPhase,
      activeStep,
      questionStartTime: this.questionStartTime,
      timerActive: this.timerActive,
      timerStarted
    });
    
    // Permettre de jouer SEULEMENT si:
    // - En phase question ET
    // - Timer d√©marr√© c√¥t√© ma√Ætre (questionStartTime > 0) ET
    // - Pas encore r√©pondu
    return !this.answerSubmitted && 
           isQuestionPhase && 
           timerStarted &&
           this.currentQuestion !== null;
  }

  // AJOUT: V√©rification p√©riodique des questions (solution de contournement au WebSocket manqu√©)
  private periodicQuestionsInterval: any;
  private lastKnownQuestionsCount = 0;

  private startPeriodicQuestionsCheck() {
    // D√©marrer la v√©rification toutes les 5 secondes
    this.periodicQuestionsInterval = setInterval(async () => {
      try {
        // Obtenir le nombre actuel de questions
        const currentQuestions = await this.quizService.questions$.pipe(take(1)).toPromise();
        const currentQuestionsCount = currentQuestions?.length || 0;
        
        // V√©rifier s'il y a eu un changement
        if (currentQuestionsCount !== this.lastKnownQuestionsCount && this.lastKnownQuestionsCount > 0) {
          console.log('[PERIODIC-CHECK] Changement d√©tect√© dans les questions:', {
            ancien: this.lastKnownQuestionsCount,
            nouveau: currentQuestionsCount
          });
          
          // Recharger les questions
          await this.quizService.reloadQuestions();
          
          // Mettre √† jour la question courante
          const newCurrentQuestion = this.quizService.getCurrentQuestion(this.currentIndex);
          if (newCurrentQuestion) {
            this.currentQuestion = newCurrentQuestion;
            console.log('[PERIODIC-CHECK] Question courante mise √† jour');
          }
          
          this.cdr.detectChanges();
        }
        
        this.lastKnownQuestionsCount = currentQuestionsCount;
        
      } catch (error) {
        console.error('[PERIODIC-CHECK] Erreur lors de la v√©rification p√©riodique:', error);
      }
    }, 5000); // Toutes les 5 secondes
    
    // Initialiser le compteur avec les questions actuelles
    this.quizService.questions$.pipe(take(1)).subscribe((questions: Question[]) => {
      this.lastKnownQuestionsCount = questions?.length || 0;
    });
  }

  // ‚úÖ FIX MOBILE: M√©thode pour identifier le type d'appareil mobile pour le d√©bogage
  getMobileDeviceInfo(): string {
    try {
      const userAgent = navigator.userAgent || navigator.vendor || (window as any).opera;
      
      // D√©tection basique du type d'appareil
      if (/android/i.test(userAgent)) {
        return `Android: ${userAgent.split('Android')[1]?.split(';')[0] || 'unknown'}`.substring(0, 30);
      }
      
      // iOS detection
      if (/iPad|iPhone|iPod/.test(userAgent) && !(window as any).MSStream) {
        return `iOS: ${userAgent.split('OS ')[1]?.split(' ')[0].replace(/_/g, '.') || 'unknown'}`.substring(0, 30);
      }
      
      // D√©tection du navigateur
      if (/chrome/i.test(userAgent)) return 'Chrome Browser';
      if (/firefox/i.test(userAgent)) return 'Firefox Browser';
      if (/safari/i.test(userAgent)) return 'Safari Browser';
      
      return `Other: ${userAgent.substring(0, 30)}`;
    } catch (e) {
      return 'Error detecting device';
    }
  }
  
  // CORRECTION: Envoyer le score au serveur pour synchronisation avec le classement c√¥t√© ma√Ætre
  private sendScoreToServer(score: number, questionIndex: number): void {
    try {
      if (!this.userId) {
        console.warn('[SCORE-SYNC] UserId manquant, impossible de synchroniser le score');
        return;
      }
      
      console.log(`[SCORE-SYNC] Envoi du score ${score} au serveur pour l'utilisateur ${this.userId} (question ${questionIndex})`);
      
      // Utiliser le service WebSocket pour envoyer le score
      this.websocketTimerService.sendUserScore({
        userId: this.userId,
        userName: this.userName,
        score: score,
        questionIndex: questionIndex,
        avatarUrl: this.avatarUrl || undefined,
        timestamp: Date.now()
      });
      
      console.log('[SCORE-SYNC] Score envoy√© avec succ√®s');
    } catch (error) {
      console.error('[SCORE-SYNC] Erreur lors de l\'envoi du score au serveur:', error);
    }
  }

  ngOnDestroy(): void {
    if (this.quizStateUnsub) this.quizStateUnsub();
    if (this.websocketTimerSub) this.websocketTimerSub.unsubscribe();
    if (this.stepTransitionSub) this.stepTransitionSub.unsubscribe();
    if (this.stepActivationSub) this.stepActivationSub.unsubscribe();
    if (this.questionsSyncSub) this.questionsSyncSub.unsubscribe();
    if (this.answersSub) this.answersSub.unsubscribe();
    this.stopTimer();
    
    // CORRECTION: Nettoyer toutes les souscriptions dans la collection
    this.subscriptions.forEach(sub => {
      if (sub) sub.unsubscribe();
    });
    this.subscriptions = [];
    
    // AJOUT: Nettoyer la v√©rification p√©riodique
    if (this.periodicQuestionsInterval) {
      clearInterval(this.periodicQuestionsInterval);
      console.log('[PERIODIC-CHECK] Interval de v√©rification arr√™t√©');
    }
  }
}