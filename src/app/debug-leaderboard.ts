/**
 * Ce module fournit des fonctions de diagnostic avanc√©es pour le leaderboard
 * pour aider √† identifier les probl√®mes de classement et de calcul de score
 * 
 * Ajout√© comme partie des correctifs pour r√©soudre les probl√®mes d'affichage du classement
 */

import { LeaderboardEntry } from './models/leaderboard-entry.model';
import { User } from './models/user.model';

/**
 * G√©n√®re un rapport de diagnostic du leaderboard
 * @param leaderboard Le tableau des entr√©es du leaderboard
 * @param participants La liste compl√®te des participants
 * @param goodAnswersTimesByUser L'objet contenant les temps de r√©ponse par utilisateur
 * @param formatTime Fonction pour formater le temps (ms -> cha√Æne lisible)
 */
export function generateLeaderboardDiagnostic(
  leaderboard: LeaderboardEntry[],
  participants: User[],
  goodAnswersTimesByUser: { [userId: string]: number[] },
  formatTime: (ms: number) => string
): void {
  console.log('====== DIAGNOSTIC DU LEADERBOARD ======');

  console.log(`üîπ Total participants: ${participants.length}`);
  console.log(`üîπ Total entr√©es leaderboard: ${leaderboard.length}`);
  
  // V√©rifier si tous les participants sont dans le leaderboard
  const participantIds = participants.map(p => String(p.id));
  const leaderboardIds = leaderboard.map(entry => String(entry.id));
  
  const missingParticipants = participants.filter(p => 
    !leaderboardIds.includes(String(p.id))
  );
  
  if (missingParticipants.length > 0) {
    console.warn(`‚ö†Ô∏è ALERTE: ${missingParticipants.length} participants ne sont pas dans le leaderboard:`);
    missingParticipants.forEach(p => {
      console.warn(`   ‚Üí ${p.name} (ID: ${p.id})`);
    });
  } else {
    console.log('‚úÖ Tous les participants sont pr√©sents dans le leaderboard');
  }
  
  // V√©rifier si tous les participants ont des temps de r√©ponse
  const participantsWithoutTimes = participants.filter(p => 
    !goodAnswersTimesByUser[p.id] || goodAnswersTimesByUser[p.id].length === 0
  );
  
  if (participantsWithoutTimes.length > 0) {
    console.warn(`‚ö†Ô∏è ALERTE: ${participantsWithoutTimes.length} participants n'ont aucun temps de r√©ponse enregistr√©:`);
    participantsWithoutTimes.forEach(p => {
      console.warn(`   ‚Üí ${p.name} (ID: ${p.id})`);
    });
  }
  
  // D√©tail du classement pour diagnostic
  console.log('\nüìä D√©tail du classement:');
  leaderboard.forEach((entry, idx) => {
    const times = goodAnswersTimesByUser[entry.id] || [];
    const validTimes = times.filter(time => typeof time === 'number' && !isNaN(time));
    const totalTime = validTimes.reduce((sum, time) => sum + time, 0);
    
    console.log(`${idx + 1}. ${entry.name} (ID: ${entry.id})`);
    console.log(`   ‚Üí Score: ${entry.score} points`);
    console.log(`   ‚Üí Temps total: ${formatTime(totalTime)}`);
    console.log(`   ‚Üí Temps par question: ${validTimes.map((time, i) => time ? `Q${i}: ${formatTime(time)}` : '').filter(Boolean).join(', ')}`);
  });
  
  console.log('====================================');
}

/**
 * V√©rifie la synchronisation entre les r√©ponses et les questions
 * @param allAnswersDocs Les documents de r√©ponses pour toutes les questions
 * @param questions La liste des questions
 */
export function checkAnswersQuestionsSynchronization(
  allAnswersDocs: any[],
  questions: any[]
): void {
  console.log('====== SYNCHRONISATION QUESTIONS / R√âPONSES ======');
  
  console.log(`üîπ Total questions: ${questions.length}`);
  console.log(`üîπ Total documents de r√©ponses: ${allAnswersDocs.length}`);
  
  // V√©rifier si le nombre de documents correspond au nombre de questions
  if (questions.length !== allAnswersDocs.length) {
    console.warn(`‚ö†Ô∏è Nombre de documents de r√©ponses (${allAnswersDocs.length}) diff√©rent du nombre de questions (${questions.length})`);
  }
  
  // V√©rifier la correspondance des IDs
  const mismatches = [];
  
  for (let i = 0; i < questions.length; i++) {
    if (i < allAnswersDocs.length) {
      const question = questions[i];
      const answerDoc = allAnswersDocs[i];
      
      if (question.id !== answerDoc.id) {
        mismatches.push({
          index: i,
          questionId: question.id,
          answerDocId: answerDoc.id
        });
      }
    }
  }
  
  if (mismatches.length > 0) {
    console.warn(`‚ö†Ô∏è ${mismatches.length} discordances entre IDs de questions et documents de r√©ponses:`);
    mismatches.forEach(m => {
      console.warn(`   ‚Üí Index ${m.index}: Question ID=${m.questionId}, R√©ponses ID=${m.answerDocId}`);
    });
  } else {
    console.log('‚úÖ Correspondance parfaite entre les IDs de questions et les documents de r√©ponses');
  }
  
  console.log('====================================');
}