
import { Component, ChangeDetectorRef, OnInit, OnDestroy } from '@angular/core';
import { TimerService, TimerState } from '../services/timer.service';
import { CommonModule } from '@angular/common';
import { QuizService, QuizStep } from '../services/quiz-secure.service';
import { Question } from '../models/question.model';
import { User } from '../models/user.model';
import { Observable, timer, Subscription, firstValueFrom } from 'rxjs';
import { LeaderboardEntry } from '../models/leaderboard-entry.model';
import { trigger, state, style, transition, animate, query, stagger } from '@angular/animations';
import html2canvas from 'html2canvas';
import { QRCodeComponent } from 'angularx-qrcode';
import { AdminAuthService } from '../services/admin-auth.service';
import { Router } from '@angular/router';
import { WebSocketTimerService } from '../services/websocket-timer.service';
import { HttpClient } from '@angular/common/http';
import { environment } from '../../environments/environment';
import { DebugPanelComponent } from '../debug-panel/debug-panel.component';
import { setupImageDebug } from '../debug-image';
import { generateLeaderboardDiagnostic, checkAnswersQuestionsSynchronization } from '../debug-leaderboard';
import { LeaderboardSyncComponent } from '../leaderboard-sync/leaderboard-sync.component';
import { fetchAllAnswersDirectly } from '../direct-fetch-answers';

@Component({
  selector: 'app-presentation',
  standalone: true,
  imports: [CommonModule, QRCodeComponent, DebugPanelComponent, LeaderboardSyncComponent],
  templateUrl: './presentation.component.html',
  styleUrls: ['./presentation.component.css'],
  animations: [
    // Animation pour les transitions d'étapes
    trigger('stepTransition', [
      transition(':enter', [
        style({ opacity: 0, transform: 'translateY(30px)' }),
        animate('500ms cubic-bezier(0.4, 0, 0.2, 1)',
          style({ opacity: 1, transform: 'translateY(0)' }))
      ])
    ]),

    // Animation pour les éléments de liste
    trigger('listAnimation', [
      transition('* => *', [
        query(':enter', [
          style({ opacity: 0, transform: 'translateY(20px)' }),
          stagger(100, [
            animate('400ms cubic-bezier(0.4, 0, 0.2, 1)',
              style({ opacity: 1, transform: 'translateY(0)' }))
          ])
        ], { optional: true })
      ])
    ]),

    // Animation pour les images
    trigger('imageAnimation', [
      transition(':enter', [
        style({ opacity: 0, transform: 'scale(0.9)' }),
        animate('400ms cubic-bezier(0.4, 0, 0.2, 1)',
          style({ opacity: 1, transform: 'scale(1)' }))
      ])
    ])
  ]
})
export class PresentationComponent implements OnInit, OnDestroy {
  getImageUrl(url: string | undefined): string {
    if (!url) return '';
    if (url.startsWith('http')) return url;
    // Si c'est un asset statique (dans /assets ou favicon), retourner l'URL telle quelle
    if (url.startsWith('/assets') || url.startsWith('assets') || url.startsWith('/favicon.ico')) {
      return url;
    }
    // Sinon, préfixer par l'API (pour images uploadées/dynamiques)
    const apiBase = this.apiUrl.replace(/\/api$/, '');
    return `${apiBase}${url}`;
  }
  step: any = 'lobby'; // Typage élargi pour compatibilité template Angular
  showRestoreDialog: boolean = false;
  private minModalDisplayTime = 2000; // Afficher le modal au minimum 2 secondes
  private modalStartTime = 0;
  buttonsEnabled = false;

  async ngOnInit() {
    // Démarrer un intervalle de rafraîchissement des participants toutes les 5 secondes
    this.participantsRefreshInterval = setInterval(() => {
      this.checkParticipantsDirectly();
    }, 5000);
    
    // D'abord, synchroniser avec l'état du serveur
    try {
      const serverState = await this.quizService.getGameState();
      // Si le serveur n'est pas à l'étape lobby, il faut restaurer cet état
      if (serverState && serverState.step && serverState.step !== 'lobby') {
        await this.synchronizeWithServer(serverState);
        return;
      }
      // Vérifier s'il y a un état sauvegardé à restaurer
      if (this.quizService.canRestoreGameState()) {
        this.showRestoreDialog = true;
        this.modalStartTime = Date.now();
        this.buttonsEnabled = false;
        setTimeout(() => {
          this.buttonsEnabled = true;
        }, this.minModalDisplayTime);
        // NE PAS initialiser tant que l'utilisateur n'a pas choisi
        return;
      }
      // Initialisation pour une nouvelle partie
      this.initializeNewGame();
    } catch (error) {
      // En cas d'erreur, continuer avec l'initialisation normale
      this.initializeNewGame();
    }
  }

  private async initializeNewGame() {
    await this.quizService.initQuestions();
    this.step = 'lobby';
    this.quizService.setStep('lobby');
    this.quizService.initGameState();
    try {
      await this.quizService.fetchParticipantsFromServer();
    } catch (error) {}
    this.initializeSubscriptions();
  }

  // Méthode pour synchroniser avec les modifications côté gestion
  async synchronizeWithManagement(): Promise<void> {
    console.log('[PRESENTATION] Synchronisation avec les modifications côté gestion...');

    // Démarrer l'état de synchronisation
    this.isSynchronizing = true;
    this.synchronizationSuccess = false;
    this.synchronizationMessage = 'Synchronisation en cours...';

    try {
      // Étape 1: Synchroniser les questions et reset les données
      this.synchronizationMessage = 'Rechargement des questions...';
      await this.quizService.synchronizeAfterChanges();

      // Étape 2: Déclencher la synchronisation côté joueur via WebSocket
      this.synchronizationMessage = 'Notification des joueurs...';
      await this.triggerPlayerQuestionsSync();

      // Étape 3: Réinitialiser l'état local
      this.synchronizationMessage = 'Réinitialisation de l\'état local...';
      await new Promise(resolve => setTimeout(resolve, 500)); // Délai pour l'UX

      this.currentIndex = 0;
      this.currentQuestion = this.quizService.getCurrentQuestion(0);
      this.leaderboard = [];
      this.questionStartTimes = {};
      this.goodAnswersTimesByUser = {};

      // Étape 4: Retourner au lobby
      this.synchronizationMessage = 'Retour au lobby...';
      this.step = 'lobby';
      this.quizService.setStep('lobby');

      // Succès
      this.synchronizationMessage = '✅ Synchronisation terminée avec succès !';
      this.synchronizationSuccess = true;

      console.log('[PRESENTATION] Synchronisation terminée, retour au lobby');

      // Masquer le message de succès après 3 secondes
      setTimeout(() => {
        this.isSynchronizing = false;
        this.synchronizationMessage = '';
        this.synchronizationSuccess = false;
      }, 3000);

    } catch (error) {
      console.error('[PRESENTATION] Erreur lors de la synchronisation:', error);

      // Affichage d'erreur
      this.synchronizationMessage = '❌ Erreur lors de la synchronisation';
      this.synchronizationSuccess = false;

      // Masquer le message d'erreur après 5 secondes
      setTimeout(() => {
        this.isSynchronizing = false;
        this.synchronizationMessage = '';
      }, 5000);
    }
  }

  // Méthode pour déclencher la synchronisation des questions côté joueur
  private async triggerPlayerQuestionsSync(): Promise<void> {
    try {
      console.log('[PRESENTATION] Déclenchement sync questions via WebSocket...');
      console.log('[PRESENTATION] URL appelée:', `${this.apiUrl}/quiz/sync-questions`);

      const response = await firstValueFrom(
        this.http.post<any>(`${this.apiUrl}/quiz/sync-questions`, {})
      );

      console.log('[PRESENTATION] Réponse serveur sync questions:', response);

      if (response?.success) {
        console.log('[PRESENTATION] Sync questions WebSocket déclenchée avec succès');
      } else {
        console.warn('[PRESENTATION] Réponse inattendue du serveur pour sync questions:', response);
      }

    } catch (error) {
      console.error('[PRESENTATION] Erreur lors du déclenchement sync questions:', error);
      // Ne pas faire échouer toute la synchronisation pour cette erreur
    }
  }

  ngOnDestroy() {
    // Nettoyage des souscriptions pour éviter les fuites mémoire
    this.subscriptions.forEach(sub => sub.unsubscribe());
    this.subscriptions = [];

    // Nettoyage des autres souscriptions
    if (this.answersCountSub) {
      this.answersCountSub.unsubscribe();
    }
    if (this.timerSub) {
      this.timerSub.unsubscribe();
    }

    // Nettoyage de l'intervalle de diagnostic
    if (this.diagnosticInterval) {
      clearInterval(this.diagnosticInterval);
    }
    
    // Nettoyage de l'intervalle de rafraîchissement des participants
    if (this.participantsRefreshInterval) {
      clearInterval(this.participantsRefreshInterval);
    }
  }
  participants: User[] = [];
  currentIndex: number = 0;
  currentQuestion: Question | null = null;
  answersCount: number[] = [];
  answersCountSub?: Subscription;
  leaderboard: LeaderboardEntry[] = [];
  // Pour le départage par vitesse de réponse
  questionStartTimes: { [key: string]: number } = {};
  // Stocke le temps de chaque bonne réponse par participant (clé: userId, valeur: tableau des temps)
  goodAnswersTimesByUser: { [userId: string]: number[] } = {};

  // Gestion des souscriptions pour éviter les fuites mémoire
  private subscriptions: Subscription[] = [];

  // Système de loading pour synchroniser avec les joueurs
  isLoading: boolean = false;
  loadingMessage: string = '';
  loadingType: string = '';

  // Flag pour éviter les logs excessifs
  private debugMode = false;

  // Référence pour l'intervalle de diagnostic
  private diagnosticInterval?: any;
  
  // Référence pour l'intervalle de rafraîchissement des participants
  private participantsRefreshInterval?: any;

  // Gestion des images pour éviter le flash
  imageLoaded: boolean = false;
  resultImageLoaded: boolean = true; // Initialiser à true par défaut pour éviter que l'image ne disparaisse
  // Flag pour forcer la disparition immédiate des images
  hideImages: boolean = false;

  // Retourne le temps total des bonnes réponses pour un user
  // (méthode unique, suppression du doublon)
  windowLocation = window.location.origin;
  timerValue: number = 20;
  timerMax: number = 20; // Durée du timer en secondes, synchronisée avec timerValue
  timerActive: boolean = false; // État d'activation du timer pour l'affichage visuel

  // Contrôle manuel du timer
  timerStartedManually: boolean = false;

  // État de synchronisation des questions
  isSynchronizing: boolean = false;
  synchronizationMessage: string = '';
  synchronizationSuccess: boolean = false;

  // Propriétés pour la photo de groupe
  cameraStream: MediaStream | null = null;
  cameraActive: boolean = false;
  cameraReady: boolean = false;
  showCameraModal: boolean = false;
  photoTaken: boolean = false;
  timerSub?: Subscription;
  totalAnswers: number = 0;
  totalGood: number = 0;
  totalBad: number = 0;
  voters: {id: any, name: any}[] = [];

  // Affichage temps formaté (mm:ss si > 60s, sinon ss.s)
  public formatTime(ms: number): string {
    if (!ms || ms < 0) return '';
    const totalSeconds = Math.floor(ms / 1000);
    if (totalSeconds < 60) {
      return (ms / 1000).toFixed(2) + ' s';
    } else {
      const minutes = Math.floor(totalSeconds / 60);
      const seconds = totalSeconds % 60;
      // Affichage sans centièmes pour plus de lisibilité
      return `${minutes} min ${seconds.toString().padStart(2, '0')} s`;
    }
  }

  canShowEndButton(): boolean {
    return this.currentIndex === (this.quizService.getQuestions().length - 1) && this.step !== 'end';
  }

  get totalQuestions(): number {
    return this.quizService.getQuestions().length;
  }

  getTotalQuestions(): number {
    return this.totalQuestions;
  }

  get currentQuestionNumber(): string {
    const questionNum = (this.currentIndex + 1).toString().padStart(2, '0');
    const totalQuestions = this.totalQuestions.toString().padStart(2, '0');
    return `${questionNum} sur ${totalQuestions}`;
  }
  
  // Méthodes pour les scores utilisateurs avec validation robuste et logs de diagnostic
  getUserScore(user: any): number {
    // Vérifications complètes pour éviter les valeurs NaN ou undefined
    if (!user) {
      console.warn('[SCORE] ⚠️ Tentative d\'accès au score d\'un utilisateur null');
      return 0;
    }
    
    // Vérifier si l'utilisateur a un score défini
    if (user.score === undefined || user.score === null) {
      console.warn(`[SCORE] ⚠️ L'utilisateur ${user.name || 'inconnu'} (ID: ${user.id || 'inconnu'}) n'a pas de score défini`);
      return 0;
    }
    
    // Normaliser le score en nombre
    const score = Number(user.score);
    
    // Vérifier si le score est un nombre valide
    if (isNaN(score)) {
      console.warn(`[SCORE] ⚠️ Score invalide pour l'utilisateur ${user.name || 'inconnu'} (ID: ${user.id || 'inconnu'}): ${user.score} -> NaN`);
      return 0;
    }
    
    // Si le score est valide mais différent de l'original, log pour diagnostic
    if (score !== user.score) {
      console.log(`[SCORE] 🔄 Score normalisé pour ${user.name || 'inconnu'}: ${user.score} -> ${score}`);
    }
    
    return score;
  }
  
  // Méthode pour détecter si le score a changé
  hasScoreChanged(userId: string): boolean {
    // À compléter selon la logique de votre application
    return false;
  }
  
  // Nouvelle méthode pour récupérer les réponses directement depuis l'API
  async fetchAllAnswersDirectlyFromAPI(): Promise<void> {
    try {
      console.log('[DIRECT-FETCH] 🚀 Démarrage de la récupération directe des réponses');
      
      // Récupérer les questions actuelles
      const questions = this.quizService.getQuestions();
      
      if (!questions || questions.length === 0) {
        console.warn('[DIRECT-FETCH] ⚠️ Aucune question disponible');
        return;
      }
      
      // Utiliser notre nouvelle fonction utilitaire pour récupérer toutes les réponses
      const answersDocs = await fetchAllAnswersDirectly(this.apiUrl, questions);
      
      console.log('[DIRECT-FETCH] 📊 Réponses récupérées directement:', answersDocs);
      
      // Utiliser ces réponses pour recalculer le leaderboard
      this.calculateLeaderboardFromDirectAnswers(answersDocs);
      
    } catch (error) {
      console.error('[DIRECT-FETCH] ❌ Erreur lors de la récupération directe des réponses:', error);
    }
  }
  
  // Calcule le leaderboard à partir des réponses récupérées directement
  private calculateLeaderboardFromDirectAnswers(answersDocs: any[]): void {
    if (!this.participants || this.participants.length === 0) {
      console.warn('[DIRECT-FETCH] ⚠️ Aucun participant disponible pour calculer le leaderboard');
      return;
    }
    
    console.log('[DIRECT-FETCH] 👥 Calcul du leaderboard pour', this.participants.length, 'participants');
    
    // Récupérer les questions pour obtenir les indices corrects
    const questions = this.quizService.getQuestions();
    
    // Mapping des IDs de questions aux indices corrects
    const questionIdToCorrectIndex = new Map<number, number>();
    questions.forEach(q => {
      if (q && q.id !== undefined && q.correctIndex !== undefined) {
        questionIdToCorrectIndex.set(q.id, q.correctIndex);
        console.log(`[DIRECT-FETCH] 📝 Question ID=${q.id}, correctIndex=${q.correctIndex}`);
      }
    });
    
    // Calculer le score pour chaque participant
    const leaderboard: LeaderboardEntry[] = this.participants.map(user => {
      let score = 0;
      let totalTime = 0;
      let goodTimes: number[] = [];
      let currentQuestionCorrect = false;
      
      // Pour chaque réponse récupérée
      for (const doc of answersDocs) {
        const questionId = doc.questionId;
        const questionIndex = doc.index;
        const answers = doc.answers || [];
        
        // Trouver la réponse de l'utilisateur actuel
        const userAnswer = answers.find((a: any) => String(a.userId) === String(user.id));
        
        if (userAnswer) {
          // Récupérer l'index correct pour cette question
          const correctIndex = questionIdToCorrectIndex.get(questionId);
          
          if (correctIndex !== undefined) {
            // Normaliser la réponse de l'utilisateur
            const userAnswerIndex = typeof userAnswer.answerIndex === 'string' ? 
                                    parseInt(userAnswer.answerIndex) : Number(userAnswer.answerIndex);
                                    
            // Vérifier si la réponse est correcte
            const isCorrect = !isNaN(userAnswerIndex) && userAnswerIndex === correctIndex;
            
            // Log détaillé
            console.log(`[DIRECT-FETCH] 🧮 ${user.name} - Q${questionIndex} (ID=${questionId}): ` +
                        `réponse=${userAnswerIndex}, correcte=${correctIndex}, correct=${isCorrect}`);
            
            if (isCorrect) {
              // Incrémenter le score
              score++;
              
              // Si c'est la question actuelle, marquer comme correcte
              if (questionIndex === this.currentIndex) {
                currentQuestionCorrect = true;
              }
              
              // Calculer le temps de réponse
              if (userAnswer.timestamp && doc.questionStartTime) {
                const timeTaken = Math.min(userAnswer.timestamp - doc.questionStartTime, 20000); // Max 20s
                goodTimes[questionIndex] = timeTaken;
                totalTime += timeTaken;
              } else {
                // Si pas de timestamp, valeur par défaut
                goodTimes[questionIndex] = 15000; // 15 secondes par défaut
                totalTime += 15000;
              }
            } else {
              // Réponse incorrecte
              goodTimes[questionIndex] = undefined as any;
            }
          }
        }
      }
      
      // Enregistrer les temps pour ce participant
      this.goodAnswersTimesByUser[user.id] = goodTimes;
      
      return {
        id: user.id,
        name: user.name,
        avatarUrl: user.avatarUrl,
        score,
        totalTime,
        currentQuestionCorrect
      };
    });
    
    // Trier le leaderboard par score puis par temps
    this.leaderboard = leaderboard.sort((a, b) => {
      // Tri principal par score (décroissant)
      if (b.score !== a.score) return b.score - a.score;
      
      // Tri secondaire par temps (croissant = meilleur)
      return a.totalTime - b.totalTime;
    });
    
    // Log du résultat
    console.log('[DIRECT-FETCH] 🏆 Leaderboard calculé avec', this.leaderboard.length, 'entrées');
    if (this.leaderboard.length > 0) {
      console.log('[DIRECT-FETCH] 🥇 Premier:', this.leaderboard[0].name, 
                  `(${this.leaderboard[0].score}pts, ${this.formatTime(this.leaderboard[0].totalTime)})`);
    }
    
    // Forcer la mise à jour de l'interface
    this.cdr.detectChanges();
  }
  
  // Méthode utilisée dans le template pour forcer la mise à jour du leaderboard avec diagnostic
  forceRefreshLeaderboard(): void {
    console.log("🔄 [DEBUG] Force refresh leaderboard");
    
    // Activer temporairement le mode debug
    const oldDebugMode = this.debugMode;
    this.debugMode = true;
    
    // Utiliser d'abord la méthode de récupération directe
    this.fetchAllAnswersDirectlyFromAPI().then(() => {
      console.log("🔄 [DEBUG] Récupération directe terminée, refresh standard en cours...");
      
      // Puis effectuer la mise à jour standard pour comparer les résultats
      this.refreshLeaderboardWithDiagnostic(true);
      
      // Restaurer le mode debug après un délai
      setTimeout(() => {
        this.debugMode = oldDebugMode;
      }, 5000);
    });
  }
  
  // Nouvelle méthode réutilisable pour rafraîchir le leaderboard
  // showDiagnostic: si true, affiche un diagnostic complet (pour le débogage)
  refreshLeaderboardWithDiagnostic(showDiagnostic: boolean = false): void {
    // Afficher les informations sur les questions si diagnostic demandé
    if (showDiagnostic) {
      const questions = this.quizService.getQuestions();
      console.log('📊 [DEBUG] Questions chargées:', questions.length);
      questions.forEach((q, idx) => {
        console.log(`📝 [DEBUG] Q${idx}: ID=${q.id}, Réponse correcte: ${q.correctIndex}`);
      });
      
      // Afficher les timestamps actuels
      console.log('⏱️ [DEBUG] Timestamps actuels:', this.questionStartTimes);
    }
    
    // Forcer la récupération des timestamps
    this.fetchQuestionStartTimes().then(() => {
      if (showDiagnostic) {
        console.log('⏱️ [DEBUG] Nouveaux timestamps:', this.questionStartTimes);
      }
      
      // Forcer la récupération directe des participants
      this.checkParticipantsDirectly().then(() => {
        console.log('👥 [DEBUG] Participants récupérés directement:', this.participants.length);
        
        // Forcer la mise à jour du classement
        this.updateLeaderboard();
        
        // Exécuter le diagnostic avancé si demandé
        if (showDiagnostic) {
          setTimeout(() => {
            console.log('🔍 [DEBUG] Exécution du diagnostic avancé du leaderboard...');
            
            // Générer un rapport de diagnostic complet
            this.quizService.getAllAnswers$().subscribe(allAnswersDocs => {
              generateLeaderboardDiagnostic(
                this.leaderboard, 
                this.participants,
                this.goodAnswersTimesByUser,
                this.formatTime.bind(this)
              );
              
              // Vérifier la synchronisation entre les questions et les réponses
              checkAnswersQuestionsSynchronization(allAnswersDocs, this.quizService.getQuestions());
            });
          }, 1000);
        }
        
        this.cdr.detectChanges();
      });
    });
  }

  private readonly apiUrl = environment.apiUrl;

  constructor(
    public quizService: QuizService,
    private timerService: TimerService,
    private cdr: ChangeDetectorRef,
    public adminAuthService: AdminAuthService,
    public router: Router,
    private websocketTimerService: WebSocketTimerService,
    private http: HttpClient
  ) {
    // Initialiser les souscriptions immédiatement pour assurer la synchronisation
    this.initializeSubscriptions();
    
    // Configurer les méthodes de débogage d'images avec détection de changements
    setupImageDebug(this, this.cdr);
  }

  private initializeSubscriptions(force: boolean = false) {
    // Éviter la duplication des souscriptions sauf si forcé
    if (this.subscriptions.length > 0 && !force) {
      console.log('⚠️  Souscriptions déjà initialisées, ignorer');
      return;
    }

    // Si forcé, nettoyer d'abord les anciennes souscriptions
    if (force && this.subscriptions.length > 0) {
      console.log('🔄 Nettoyage des anciennes souscriptions avant réinitialisation');
      this.subscriptions.forEach(sub => sub.unsubscribe());
      this.subscriptions = [];
    }
    
    // Forcer une vérification synchrone de l'état actuel
    this.quizService.forceCheckState().then(currentStep => {
      console.log('👁️ [DEBUG] État forcé vérifié:', currentStep);
      this.step = currentStep;
      this.cdr.detectChanges();
    });
    
    // Forcer la récupération des participants directement depuis le serveur
    fetch('http://localhost:3000/api/participants')
      .then(response => response.json())
      .then(data => {
        console.log('👥 [DEBUG] Participants récupérés directement de l\'API:', data);
        if (Array.isArray(data) && data.length > 0) {
          this.participants = data;
          console.log('✅ [DEBUG] Participants définis manuellement:', this.participants);
          this.cdr.detectChanges();
        }
      })
      .catch(error => console.error('❌ [DEBUG] Erreur récupération participants:', error));

    console.log('🔄 Initialisation des souscriptions...');

    // ✅ S'abonner aux changements de questions
    const questionsSub = this.quizService.questions$.subscribe(questions => {
      if (questions.length > 0) {
        console.log(`[PRESENTATION-QUESTIONS] Nouvelle liste de questions reçue: ${questions.length} questions`);

        // Mettre à jour la question courante si elle a changé
        const newCurrentQuestion = this.quizService.getCurrentQuestion(this.currentIndex);
        if (newCurrentQuestion &&
            (!this.currentQuestion || this.currentQuestion.id !== newCurrentQuestion.id)) {

          console.log(`[PRESENTATION-QUESTIONS] Question ${this.currentIndex} mise à jour:`, {
            ancien: this.currentQuestion?.text?.substring(0, 50) + '...',
            nouveau: newCurrentQuestion.text?.substring(0, 50) + '...'
          });

          this.currentQuestion = newCurrentQuestion;
        }
      }
    });
    this.subscriptions.push(questionsSub);

    // ✅ S'abonner aux transitions d'étapes synchronisées via WebSocket
    const stepTransitionSub = this.websocketTimerService.getStepTransitions().subscribe(transitionData => {
      console.log('[PRESENTATION][STEP-WS] Transition reçue:', transitionData);
      this.showLoadingForTransition('question-start'); // Type par défaut pour les transitions
    });
    this.subscriptions.push(stepTransitionSub);

    const stepActivationSub = this.websocketTimerService.getStepActivations().subscribe(activationData => {
      console.log('[PRESENTATION][STEP-WS] Activation reçue:', activationData);

      // Gestion structure imbriquée
      let stepValue = activationData.step;
      const rawData = activationData as any;
      if (!stepValue && rawData.data && rawData.data.step) {
        stepValue = rawData.data.step;
        console.log('[PRESENTATION][STEP-WS] Étape extraite de structure imbriquée:', stepValue);
      }

      console.log('[PRESENTATION][STEP-WS] Étape finale:', stepValue);

      this.isLoading = false;
      this.step = stepValue as QuizStep;

      // Actions spécifiques aux étapes après activation synchronisée
      this.handleStepActivationPresentation(stepValue as QuizStep);

      this.refresh();
      this.cdr.detectChanges();
    });
    this.subscriptions.push(stepActivationSub);

    // Synchro temps réel de l'étape du quiz (fallback pour compatibilité)
    let lastStep: string | null = null;
    const stepSub = this.quizService.getStep().subscribe(step => {
      if (!step || step === lastStep) return;

      console.log('[PRESENTATION][STEP-FALLBACK] Changement d\'étape :', lastStep, '->', step);
      lastStep = step;

      // Changement direct si WebSocket ne fonctionne pas
      this.step = step as QuizStep;
      this.handleStepActivationPresentation(step as QuizStep);
      this.refresh();
      this.cdr.detectChanges();
    });
    this.subscriptions.push(stepSub);

    // Synchro temps réel de l'index de la question
    const indexSub = this.quizService.getCurrentIndex().subscribe(async idx => {
      const previousIndex = this.currentIndex;
      this.currentIndex = idx;

      // Reset image states immediately when index changes to prevent flash
      if (previousIndex !== idx) {
        this.imageLoaded = false;
        this.resultImageLoaded = false;
        this.hideImages = false; // Allow images to show again for new question
        // Force immediate UI update to hide images instantly
        this.cdr.detectChanges();
        console.log('[DEBUG][INDEX] Image states reset for index change:', previousIndex, '->', idx);
      }

      await this.fetchQuestionStartTimes(); // Rafraîchit les timestamps à chaque question
      this.refresh();
      // Synchro temps réel des votants pour la question courante
      const votersSub = this.quizService.getVoters$(idx).subscribe((voters: {id: any, name: any}[]) => {
        this.voters = voters;
      });
      this.subscriptions.push(votersSub);

      // Synchro temps réel du nombre de réponses par option
      if (this.answersCountSub) this.answersCountSub.unsubscribe();
      console.log('[DEBUG][SUBSCRIPTION] Starting getAnswersCount$ subscription for question:', idx);
      this.answersCountSub = this.quizService.getAnswersCount$(idx).subscribe(counts => {
        console.log('[DEBUG][SUBSCRIPTION] getAnswersCount$ returned:', counts);
        this.answersCount = counts;
        this.refresh();
      });
      // Optimisé : calcul du leaderboard sans logs excessifs
      this.updateLeaderboard();
    });
    this.subscriptions.push(indexSub);

    // Synchro temps réel des inscrits - optimisé pour 60+ participants
    const participantsSub = this.quizService.getParticipants$().subscribe(participants => {
      const oldCount = this.participants.length;
      console.log('[PRESENTATION][DEBUG] getParticipants$ a retourné:', participants.length, 'participants');

      // Eviter les fluctuations si la liste est vide temporairement
      if (participants.length === 0 && oldCount > 0) {
        console.log('[PRESENTATION] Liste participants temporairement vide - conservation de la liste précédente');
        return; // Ne pas vider la liste si elle était non-vide avant
      }

      this.participants = participants;
      const newCount = this.participants.length;

      if (oldCount !== newCount) {
        console.log(`[PRESENTATION] Participants: ${oldCount} → ${newCount}`, 
                    'Noms:', participants.map(p => p.name).join(', '));
      } else if (participants.length > 0) {
        console.log('[PRESENTATION] Même nombre de participants:', newCount,
                    'Noms:', participants.map(p => p.name).join(', '));
      }
      
      // Forcer la mise à jour de l'interface dans tous les cas
      this.cdr.detectChanges();
      
      // Vérifier si les participants devraient être visibles dans l'écran actuel
      if (this.step === 'lobby' || this.step === 'waiting') {
        console.log(`[PRESENTATION][DEBUG] Dans l'étape ${this.step} avec ${participants.length} participants`);
      }

      this.updateLeaderboard();
    });
    this.subscriptions.push(participantsSub);
    
    // Ajout: Forcer la récupération initiale des participants depuis le serveur
    this.quizService.fetchParticipantsFromServer().then(participants => {
      console.log('[PRESENTATION][INIT] Participants initiaux récupérés:', participants.length);
      this.participants = participants;
      this.cdr.detectChanges();
    });

    // ✅ S'abonner aux mises à jour WebSocket du timer pour la synchronisation visuelle côté présentation
    const timerWebSocketSub = this.websocketTimerService.getCountdown().subscribe(timerState => {
      console.log('[PRESENTATION][TIMER-WS] Timer update reçu:', timerState);

      // Mettre à jour l'affichage du timer côté présentation quand il est actif
      if (timerState.questionStartTime && timerState.questionStartTime > 0 && this.step === 'question') {
        this.timerValue = timerState.timeRemaining;
        this.timerMax = timerState.timerMax;
        this.timerActive = timerState.isActive;

        // Si le timer est démarré côté serveur, marquer comme démarré manuellement
        if (!this.timerStartedManually) {
          this.timerStartedManually = true;
          console.log('[PRESENTATION][TIMER-WS] Timer démarré détecté, timerStartedManually = true');
        }

        // Mise à jour visuelle immédiate
        this.cdr.detectChanges();

        console.log('[PRESENTATION][TIMER-WS] Timer visuel mis à jour:', {
          timeRemaining: this.timerValue,
          isActive: this.timerActive,
          timerMax: this.timerMax
        });
      } else if (timerState.questionStartTime === 0 && this.step === 'question') {
        // Timer pas encore démarré, réinitialiser l'affichage
        this.timerActive = false;
        this.timerValue = timerState.timerMax || 20;
        this.timerStartedManually = false;
        console.log('[PRESENTATION][TIMER-WS] Timer en attente, timerStartedManually = false');
        this.cdr.detectChanges();
      }
    });
    this.subscriptions.push(timerWebSocketSub);
  }

  // Retourne le temps total des bonnes réponses pour un user
  public getTotalGoodAnswersTime(userId: string): number {
    // Protection contre les valeurs non définies
    if (!userId || !this.goodAnswersTimesByUser) return 0;
    
    // Obtenir le tableau des temps, ou tableau vide si non défini
    const arr = this.goodAnswersTimesByUser[userId] || [];
    
    // Log pour le diagnostic des temps par utilisateur
    const validTimes = arr.filter(time => typeof time === 'number' && !isNaN(time));
    const total = validTimes.reduce((sum, time) => sum + time, 0);
    
    // Log détaillé uniquement pour les utilisateurs avec des temps (pour éviter trop de logs)
    if (validTimes.length > 0) {
      console.log(`[TIME-DIAG] ⏱️ User ${userId}: ${validTimes.length} temps valides, total: ${this.formatTime(total)}`);
      console.log(`[TIME-DIAG] Détail:`, validTimes.map((time, idx) => `Q${idx}: ${time ? this.formatTime(time) : '-'}`).join(', '));
    }
    
    // Filtrer les valeurs valides et faire la somme
    return total;
  }

  // Méthode optimisée pour mettre à jour le leaderboard sans logs excessifs
  private updateLeaderboard(): void {
    // Si pas de participants, pas besoin de calculer le leaderboard
    if (this.participants.length === 0) {
      this.leaderboard = [];
      console.log('[LEADERBOARD] Aucun participant, leaderboard vide.');
      return;
    }
    
    console.log('[LEADERBOARD-DIAG] 🔍 Début du calcul du leaderboard avec', this.participants.length, 'participants');
    console.log('[LEADERBOARD-DIAG] 📋 Liste des participants:', this.participants.map(p => p.name).join(', '));

    this.fetchQuestionStartTimes().then(() => {
      const subscription = this.quizService.getAllAnswers$().subscribe((allAnswersDocs: any[]) => {
        const nbQuestions = this.quizService.getQuestions().length;

        // Si pas de questions, pas de leaderboard
        if (nbQuestions === 0) {
          this.leaderboard = [];
          console.log('[LEADERBOARD] Aucune question, leaderboard vide.');
          return;
        }

        // Journal détaillé des documents de réponses
        console.log('[LEADERBOARD] 📊 Mise à jour du classement:', {
          participants: this.participants.length,
          nbQuestions,
          allAnswersDocs: allAnswersDocs.length
        });

        // Pour le debug, afficher les IDs des documents de réponses
        console.log('[LEADERBOARD] 📝 IDs des documents de réponses:', allAnswersDocs.map(d => d.id));

        // Nous affichons tous les participants, qu'ils aient répondu correctement ou non
        console.log('[LEADERBOARD] 👍 Calcul du classement pour tous les participants...');
        
        console.log('[LEADERBOARD] 👍 Au moins une réponse valide trouvée, calcul du classement...');
        
        console.log('[LEADERBOARD-DIAG] 🧩 Document de réponses disponibles:', allAnswersDocs.map(doc => `ID:${doc.id}, Réponses:${doc.answers?.length || 0}`).join(' | '));

        const leaderboard: LeaderboardEntry[] = this.participants.map(user => {
          let score = 0;
          let totalTime = 0;
          let goodTimes: number[] = [];
          // Flag pour suivre les bonnes réponses à la question actuelle
          let currentQuestionCorrect = false;

          console.log('[LEADERBOARD] 🧮 Calcul du score pour:', user.name);

          // Pour chaque question du quiz
          for (let i = 0; i < nbQuestions; i++) {
            // Récupérer la question actuelle pour connaître son ID et l'index correct
            const question = this.quizService.getCurrentQuestion(i);
            if (!question) {
              console.log(`[LEADERBOARD] ⚠️ Question ${i} introuvable, ignorée pour ${user.name}`);
              goodTimes[i] = undefined as any;
              continue;
            }
            
            // Journal pour tracer la question
            console.log(`[LEADERBOARD] 📝 Vérification Q${i} (ID:${question.id}) pour ${user.name}`);
            
            // STRATÉGIE ROBUSTE: Recherche des réponses avec multiple stratégies
            let docAns = null;
            let answerSource = '';
            
            // 1. D'abord chercher par index (cas le plus courant)
            docAns = allAnswersDocs.find((d: any) => String(d.id) === String(i));
            if (docAns) {
              answerSource = 'index';
              console.log(`[LEADERBOARD] ✅ Réponses trouvées pour Q${i} via index direct`);
            }
            
            // 2. Si pas trouvé et ID différent, chercher par ID de question
            if (!docAns && question && question.id !== undefined && question.id !== i) {
              const docAnsById = allAnswersDocs.find((d: any) => String(d.id) === String(question.id));
              if (docAnsById) {
                docAns = docAnsById;
                answerSource = 'id';
                console.log(`[LEADERBOARD] 🔍 Réponses trouvées via ID=${question.id} plutôt que index=${i}`);
              }
            }
            
            // 3. Chercher par questionId explicite (si présent dans les documents)
            if (!docAns) {
              const docAnsByQuestionId = allAnswersDocs.find((d: any) => 
                d.questionId !== undefined && String(d.questionId) === String(question.id)
              );
              if (docAnsByQuestionId) {
                docAns = docAnsByQuestionId;
                answerSource = 'questionId';
                console.log(`[LEADERBOARD] 🔍 Réponses trouvées via questionId=${question.id}`);
              }
            }
            
            // 4. Si toujours pas trouvé, chercher par toute méthode approximative disponible
            if (!docAns) {
              console.log(`[LEADERBOARD] ⚠️ Aucune réponse trouvée pour Q${i} (ID:${question.id}), recherche flexible...`);
              
              // Log détaillé de tous les documents de réponses disponibles pour faciliter le diagnostic
              console.log(`[LEADERBOARD-DIAG] 📋 Documents de réponses disponibles:`, 
                allAnswersDocs.map(d => `{id:${d.id}, questionId:${d.questionId||'undef'}, index:${d.index||'undef'}, réponses:${d.answers?.length||0}}`).join('\n'));
              
              // Essai avec valeur entière ou string (comparaisons faibles)
              docAns = allAnswersDocs.find((d: any) => d.id == i || d.id == question.id);
              if (docAns) {
                answerSource = 'flexible';
                console.log(`[LEADERBOARD] ✅ Réponses trouvées par correspondance flexible pour Q${i}`);
              }
              
              // Recherche par index dans le document original
              if (!docAns) {
                const docAnsByIndex = allAnswersDocs.find((d: any) => d.index !== undefined && d.index == i);
                if (docAnsByIndex) {
                  docAns = docAnsByIndex;
                  answerSource = 'documentIndex';
                  console.log(`[LEADERBOARD] ✅ Réponses trouvées via index explicite du document pour Q${i}`);
                }
                
                // DERNIER RECOURS: Parcourir tous les documents et chercher des réponses
                if (!docAns) {
                  // Chercher n'importe quel document avec des réponses
                  const docsWithAnswers = allAnswersDocs.filter(d => d.answers && d.answers.length > 0);
                  if (docsWithAnswers.length > 0) {
                    console.log(`[LEADERBOARD] 🔍 Recours ultime: ${docsWithAnswers.length} documents avec réponses trouvés`);
                    // Prendre le premier document avec des réponses
                    docAns = docsWithAnswers[0];
                    answerSource = 'lastResort';
                  }
                }
              }
            }
            
            // Si des réponses sont trouvées, chercher celle de l'utilisateur
            if (docAns && docAns.answers) {
              const answers = docAns.answers.filter((a: any) => String(a.userId) === String(user.id));
              
              if (answers.length > 0) {
                // Prendre la dernière réponse (la plus récente)
                const answer = answers[answers.length - 1];

                // Normaliser les types pour la comparaison - avec logging pour diagnostic
                const userAnswerIndexRaw = answer.answerIndex;
                const correctAnswerIndexRaw = question.correctIndex;
                
                // Conversion explicite en nombre avec handling des cas spéciaux
                const userAnswerIndex = typeof userAnswerIndexRaw === 'string' ? 
                                        parseInt(userAnswerIndexRaw, 10) : Number(userAnswerIndexRaw);
                const correctAnswerIndex = typeof correctAnswerIndexRaw === 'string' ? 
                                           parseInt(correctAnswerIndexRaw, 10) : Number(correctAnswerIndexRaw);
                
                // Log détaillé des valeurs avant et après conversion pour diagnostic
                console.log(`[LEADERBOARD] 🔢 Q${i}: userAnswerIndex=${userAnswerIndexRaw}(${typeof userAnswerIndexRaw}) -> ${userAnswerIndex}(number), correctAnswerIndex=${correctAnswerIndexRaw}(${typeof correctAnswerIndexRaw}) -> ${correctAnswerIndex}(number)`);
                
                // Déterminer si la réponse est correcte avec comparaison souple (==) pour gérer les cas limites
                // mais uniquement après normalisation en nombre pour éviter les faux positifs
                const isCorrect = !isNaN(userAnswerIndex) && !isNaN(correctAnswerIndex) && 
                                 userAnswerIndex == correctAnswerIndex; // Comparaison souple intentionnelle
                
                console.log(`[LEADERBOARD] 📊 Q${i} (ID:${question.id}) - ${user.name}:`, {
                  réponse: userAnswerIndex,
                  correcte: correctAnswerIndex,
                  correct: isCorrect,
                  source: answerSource
                });

                // Si la réponse est correcte, ajouter au score
                if (isCorrect) {
                  score++;
                  
                  // Marquer comme correcte si c'est la question actuelle
                  if (i === this.currentIndex) {
                    currentQuestionCorrect = true;
                    console.log(`[LEADERBOARD] 🎯 Bonne réponse à la question actuelle pour ${user.name}`);
                  }
                  
                  // CALCUL DU TEMPS DE RÉPONSE - MÉTHODE ROBUSTE
                  let qStart = null;
                  
                  // 1. Essayer avec l'ID de la question
                  if (question.id !== undefined) {
                    qStart = this.questionStartTimes[question.id] || this.questionStartTimes[String(question.id)];
                  }
                  
                  // 2. Fallback sur l'index si pas trouvé par ID
                  if (!qStart) {
                    qStart = this.questionStartTimes[i] || this.questionStartTimes[String(i)];
                  }
                  
                  // 3. Si toujours rien, créer un timestamp par défaut
                  if (!qStart && answer.timestamp) {
                    qStart = answer.timestamp - 10000; // Par défaut: 10 secondes
                    console.warn(`[LEADERBOARD] ⏱️ Aucun timestamp trouvé pour Q${i} (ID:${question.id}), valeur par défaut utilisée`);
                  }
                  
                  // Calculer le temps effectif pris pour répondre
                  if (answer.timestamp && qStart && answer.timestamp >= qStart) {
                    const timeTaken = Math.min(answer.timestamp - qStart, 20000); // Max 20s
                    goodTimes[i] = timeTaken;
                    totalTime += timeTaken;
                    console.log(`[LEADERBOARD] ⏱️ Temps pour ${user.name}, Q${i}: ${timeTaken}ms (${this.formatTime(timeTaken)})`);
                  } else if (answer.timestamp) {
                    // Si timestamp invalide, valeur par défaut
                    const defaultTime = 15000; // 15 secondes
                    goodTimes[i] = defaultTime;
                    totalTime += defaultTime;
                    console.warn(`[LEADERBOARD] ⏱️ Timestamp invalide pour ${user.name}, Q${i}, défaut: ${defaultTime}ms`);
                  }
                } else {
                  // Réponse incorrecte
                  goodTimes[i] = undefined as any;
                }
              } else {
                // Pas de réponse pour cet utilisateur
                goodTimes[i] = undefined as any;
              }
            } else {
              // Pas de document de réponse trouvé
              goodTimes[i] = undefined as any;
            }
          }

          console.log(`[LEADERBOARD] ✨ Score final pour ${user.name}: ${score}/${nbQuestions} (temps: ${this.formatTime(totalTime)})`);

          // Sauvegarder les temps pour utilisation ultérieure
          this.goodAnswersTimesByUser[user.id] = goodTimes;
          
          // Créer l'entrée pour le tableau de classement avec toutes les données
          return { 
            id: user.id, 
            name: user.name, 
            avatarUrl: user.avatarUrl, 
            score, 
            totalTime,
            currentQuestionCorrect, // Nouveau: indique si bonne réponse à la question actuelle
          };
        });

        // Tri du classement: d'abord par score, puis par temps
        this.leaderboard = leaderboard.sort((a, b) => {
          // Tri principal par score (décroissant)
          if (b.score !== a.score) return b.score - a.score;
          
          // Tri secondaire par temps (croissant = meilleur)
          return a.totalTime - b.totalTime;
        });

        // Journal détaillé du leaderboard résultant
        console.log(`[LEADERBOARD] 🏆 Classement généré: ${this.leaderboard.length} entrées`);
        if (this.leaderboard.length > 0) {
          console.log('[LEADERBOARD] 🥇 Premier:', this.leaderboard[0].name, 
                      `(${this.leaderboard[0].score}pts, ${this.formatTime(this.leaderboard[0].totalTime)})`);
          
          // Log détaillé du classement complet pour le diagnostic
          console.log('[LEADERBOARD-DIAG] 📊 Classement complet:');
          this.leaderboard.forEach((entry, idx) => {
            console.log(`[LEADERBOARD-DIAG] ${idx + 1}. ${entry.name}: ${entry.score}pts, ${this.formatTime(entry.totalTime)} (ID: ${entry.id})`);
          });
        }
        
        // Forcer la mise à jour de l'interface
        this.cdr.detectChanges();
      });

      this.subscriptions.push(subscription);
    });
  }

  // Récupère les questionStartTimes via l'API HTTP
  public async fetchQuestionStartTimes(): Promise<void> {
    try {
      // Récupération des timestamps depuis le serveur
      try {
        const response = await this.http.get(`${this.apiUrl}/quiz/question-start-times`).toPromise();
        if (response && typeof response === 'object') {
          console.log('[TIMESTAMPS] Récupération réussie:', response);
          this.questionStartTimes = response as Record<string, number>;
        } else {
          console.warn('[TIMESTAMPS] Format de réponse inattendu:', response);
          this.questionStartTimes = {};
        }
      } catch (apiError) {
        console.warn('[TIMESTAMPS] Erreur API, création locale:', apiError);
        
        // Fallback: créer un objet de timestamps basés sur les questions actuelles
        const questions = this.quizService.getQuestions();
        const timestamps: Record<string, number> = {};
        
        questions.forEach((q, index) => {
          // On utilise l'ID de la question comme clé, pas l'index
          if (q && q.id !== undefined) {
            timestamps[q.id] = Date.now() - (index * 60000); // Simulation: question démarrée il y a (index * 1min)
            timestamps[String(index)] = timestamps[q.id]; // Double référence par index et par ID
            
            // Diagnostic pour les problèmes d'ID
            if (index !== q.id) {
              console.warn(`[TIMESTAMPS] Question trouvée à l'index ${index}, mais son ID=${q.id} est différent (⚠️ potentiel problème de score)`);
            }
          }
        });
        
        this.questionStartTimes = timestamps;
        console.log('[TIMESTAMPS] Timestamps créés localement:', this.questionStartTimes);
      }
    } catch (e) {
      console.error('Erreur récupération questionStartTimes', e);
      this.questionStartTimes = {};
    }
  }

  /* Fonction Skip désactivée - le bouton a été retiré de l'interface
  forceEndTimer() {
    // Appel backend pour forcer la fin du timer chez tous les joueurs
    try {
  this.http.post('/api/quiz/skip-timer', {}, { responseType: 'json' }).subscribe({
        next: (response) => {
          console.log('[SKIP-TIMER] Réponse backend (type):', typeof response, response);
          try {
            if (response && (response as any).success) {
              this.timerValue = 0;
              this.stopTimer();
              this.showResult();
            } else {
              alert('Réponse inattendue du backend : ' + JSON.stringify(response));
            }
          } catch (e) {
            alert('Erreur de parsing de la réponse backend : ' + e);
          }
        },
        error: (err) => {
          console.error('[SKIP-TIMER] Erreur HTTP :', err);
          let msg = 'Erreur lors du skip timer : ';
          if (err.status) msg += `HTTP ${err.status} - `;
          if (err.error && typeof err.error === 'object') {
            msg += JSON.stringify(err.error);
          } else if (err.error) {
            msg += err.error;
          } else if (err.message) {
            msg += err.message;
          }
          if (err instanceof ProgressEvent && err.type === 'error') {
            msg += ' (Erreur réseau/fetch : la connexion a échoué ou a été bloquée par le navigateur)';
          }
          alert(msg);
        }
      });
    } catch (e) {
      alert('Erreur JS lors de l’appel skip-timer : ' + e);
      console.error('[SKIP-TIMER] Exception JS :', e);
    }
  }

  // ngOnInit fusionné ci-dessus

  refresh() {
    // this.participants = ... supprimé, car synchro via API SQLite
    const previousQuestion = this.currentQuestion;
    this.currentQuestion = this.quizService.getCurrentQuestion(this.currentIndex);

    // Reset image loaded state IMMEDIATELY when question changes to prevent flash
    if (previousQuestion?.id !== this.currentQuestion?.id) {
      this.imageLoaded = false;
      this.resultImageLoaded = false;
      this.hideImages = false; // Allow images to show for new question
      console.log('[DEBUG][REFRESH] Image states reset due to question change');
    }

    // Ne pas écraser le leaderboard dynamique ici !

    console.log('[DEBUG][REFRESH] currentQuestion:', this.currentQuestion);
    console.log('[DEBUG][REFRESH] answersCount:', this.answersCount);
    console.log('[DEBUG][REFRESH] currentIndex:', this.currentIndex);

    if (this.currentQuestion && this.answersCount) {
      console.log('[DEBUG][REFRESH] correctIndex:', this.currentQuestion.correctIndex);
      this.totalGood = this.answersCount[this.currentQuestion.correctIndex] || 0;
      this.totalAnswers = this.answersCount.reduce((a, b) => a + b, 0);
      this.totalBad = this.totalAnswers - this.totalGood;

      console.log('[DEBUG][REFRESH] Calculated values:', {
        totalGood: this.totalGood,
        totalBad: this.totalBad,
        totalAnswers: this.totalAnswers
      });
    } else {
      this.totalGood = 0;
      this.totalAnswers = 0;
      this.totalBad = 0;
      console.log('[DEBUG][REFRESH] Reset to 0 - missing currentQuestion or answersCount');
    }
  }
      async launchGame() {
    // Passe à l'étape "waiting" avant de lancer la première question
    console.log("[DEBUG] launchGame() appelé - Passage à l'étape 'waiting'");
    try {
      const success = await this.quizService.setStep('waiting');
      console.log("[DEBUG] Étape 'waiting' définie avec succès =", success);
      
      // Force la vérification de l'état après un court délai pour s'assurer que la transition a eu lieu
      setTimeout(async () => {
        const currentStep = await this.quizService.forceCheckState();
        console.log("[DEBUG] Vérification d'état après transition: step =", currentStep);
        
        if (currentStep !== 'waiting') {
          console.error("[DEBUG] ERREUR: L'état n'est pas passé à 'waiting' comme prévu");
          // Nouvelle tentative
          console.log("[DEBUG] Nouvelle tentative de passage à l'étape 'waiting'");
          await this.quizService.setStep('waiting');
        }
      }, 1000);
    } catch (error) {
      console.error("[ERROR] Erreur lors du passage à l'étape 'waiting':", error);
    }
  }
    console.log("[DEBUG] launchGame() appelé - Passage à l'étape 'waiting'");
    try {
      const success = await this.quizService.setStep('waiting');
      console.log("[DEBUG] Étape 'waiting' définie avec succès =", success);
      
      // Force la vérification de l'état après un court délai pour s'assurer que la transition a eu lieu
      setTimeout(async () => {
        const currentStep = await this.quizService.forceCheckState();
        console.log("[DEBUG] Vérification d'état après transition: step =", currentStep);
        
        if (currentStep !== 'waiting') {
          console.error("[DEBUG] ERREUR: L'état n'est pas passé à 'waiting' comme prévu");
          // Nouvelle tentative
          console.log("[DEBUG] Nouvelle tentative de passage à l'étape 'waiting'");
          await this.quizService.setStep('waiting');
        }
      }, 1000);
    } catch (error) {
      console.error("[ERROR] Erreur lors du passage à l'étape 'waiting':", error);
    }
  }
    console.log("[DEBUG] launchGame() appelé - Passage à l'étape \"waiting\"");
    try {
      const success = await this.quizService.setStep('waiting');
      console.log("[DEBUG] Étape \"waiting\" définie avec succès =", success);
      
      // Force la vérification de l'état après un court délai pour s'assurer que la transition a eu lieu
      setTimeout(async () => {
        const currentStep = await this.quizService.forceCheckState();
        console.log("[DEBUG] Vérification d'état après transition: step =", currentStep);
        
        if (currentStep !== 'waiting') {
          console.error("[DEBUG] ERREUR: L'état n'est pas passé à \"waiting\" comme prévu");
          // Nouvelle tentative
          console.log("[DEBUG] Nouvelle tentative de passage à l'étape \"waiting\"");
          await this.quizService.setStep('waiting');
        }
      }, 1000);
    } catch (error) {
      console.error("[ERROR] Erreur lors du passage à l'étape \"waiting\":", error);
    }
  }

  // Méthode à appeler pour vraiment démarrer la première question après l'attente
  async startFirstQuestion() {
    // Démarre la première question via l'API HTTP
    try {
      // Utilise nextQuestion(-1) pour forcer le passage à l'index 0 avec initialisation du timer
      await this.quizService.nextQuestion(-1);
      console.log('[INFO] First question started via HTTP API');
    } catch (error) {
      console.error('Erreur lors du démarrage de la première question:', error);
    }
  }

  startTimer() {
    this.stopTimer();
    this.syncTimerWithServer();
  }

  private async checkAndSyncTimer() {
    try {
      const gameState = await this.quizService.getGameState();

      if (gameState?.questionStartTime) {
        // Le serveur a déjà un questionStartTime, synchroniser
        console.log('🕐 Question déjà démarrée côté serveur, synchronisation...');
        this.syncTimerWithServer();
      } else {
        // Pas de questionStartTime côté serveur, ne pas démarrer le timer
        console.log('⏸️ Pas de timer côté serveur, service centralisé gère l\'état');
        // Le service centralisé gère l'état par défaut
      }
    } catch (error) {
      console.warn('Erreur vérification timer serveur, service centralisé prend le relais:', error);
      // Le service centralisé gère l'état par défaut en cas d'erreur
    }
  }

  private async syncTimerWithServer() {
    try {
      console.log('🕐 [PRESENTATION] Synchronisation timer centralisée (auto-démarrage)');

      // S'abonner aux mises à jour du timer centralisé (démarrage automatique)
      if (this.timerSub) this.timerSub.unsubscribe();

      this.timerSub = this.timerService.getCountdown().subscribe(timerState => {
        const countdown = timerState.countdownToStart || 0;

        if (countdown > 0) {
          // Mode countdown avant démarrage
          this.timerValue = countdown;
          this.timerMax = countdown;
          console.log(`⏳ [PRESENTATION] Countdown: Question démarre dans ${countdown}s`);
        } else {
          // Mode timer normal
          this.timerValue = timerState.timeRemaining;
          this.timerMax = timerState.timerMax;
          console.log(`🕐 [PRESENTATION] Timer: ${timerState.timeRemaining}s/${timerState.timerMax}s, active: ${timerState.isActive}`);

          if (timerState.timeRemaining <= 0 && timerState.isActive === false) {
            this.showResult();
          }
        }
      });

      // Le service centralisé gère la synchronisation initiale automatiquement
      console.log('🕐 [PRESENTATION] Service centralisé actif, synchronisation automatique');

    } catch (error) {
      console.warn('Erreur synchronisation timer, fallback au service centralisé:', error);
      // Fallback: utiliser le service centralisé avec démarrage simple
      this.timerService.start(20);
    }
  }

  // DEPRECATED: Ancienne méthode remplacée par le service timer centralisé
  private startTimerNormal_DEPRECATED(duration: number = 20) {
    console.warn('⚠️ startTimerNormal_DEPRECATED appelée - utiliser le service centralisé à la place');
    // Ne plus utiliser cette méthode, utiliser timerService.startServerSync() à la place
    this.timerService.start(duration);
  }

  stopTimer() {
    if (this.timerSub) this.timerSub.unsubscribe();
    this.timerService.stopServerSync(); // Arrêter la synchronisation centralisée
  }

  showResult() {
    // DEBUG : log état avant passage à l'étape résultat
    // Reset image states IMMEDIATELY to prevent any flash
    this.imageLoaded = false;
    this.resultImageLoaded = false;
    // Force immediate UI update to hide images instantly
    this.cdr.detectChanges();

    // On force la mise à jour des données avant d'afficher le résultat
    const previousQuestion = this.currentQuestion;
    this.currentQuestion = this.quizService.getCurrentQuestion(this.currentIndex);

    // answersCount est toujours à jour via l'abonnement (voir ngOnInit)
    if (this.currentQuestion && this.answersCount && Array.isArray(this.answersCount)) {
      this.totalGood = this.answersCount[this.currentQuestion.correctIndex] || 0;
      this.totalAnswers = this.answersCount.reduce((a, b) => a + b, 0);
      this.totalBad = this.totalAnswers - this.totalGood;
    } else {
      this.totalGood = 0;
      this.totalAnswers = 0;
      this.totalBad = 0;
    }
    // Passage à l'étape résultat avec délai pour laisser le flux RxJS se mettre à jour
    setTimeout(() => {
      this.quizService.setStep('result');
      this.step = 'result'; // Synchronisation immédiate pour le template
      this.refresh(); // Correction : forcer la mise à jour des données juste après le changement d'étape
      this.cdr.markForCheck();
      // Log après le changement d'étape
      console.log('[DEBUG][RESULT] step:', this.step, 'currentQuestion:', this.currentQuestion, 'answersCount:', this.answersCount);
    }, 120);
  }

  async nextQuestion() {
    // Incrémente l'index et passe à la question suivante via l'API
    try {
      console.log('[PRESENTATION] Next question via HTTP API, current index:', this.currentIndex);

      // Hide images immediately - most aggressive approach
      this.hideImages = true;
      this.imageLoaded = false;
      this.resultImageLoaded = false;

      // Reset timer immediately to sync with image change
      this.timerValue = 0;
      this.stopTimer();

      // Force immediate UI update to hide images instantly and show empty timer
      this.cdr.detectChanges();

      // Petit délai pour laisser l'interface se mettre à jour
      await new Promise(resolve => setTimeout(resolve, 50));

      // Reset timer to full immediately for visual sync
      this.timerValue = 20;
      this.timerMax = 20;
      this.cdr.detectChanges();

      // CORRECTION: Un seul appel qui gère tout (index + step + timer)
      await this.quizService.nextQuestion(this.currentIndex);
      console.log('[PRESENTATION] Question suivante appelée, nouvel index:', this.currentIndex + 1);
    } catch (error) {
      console.error('[PRESENTATION] Erreur lors du passage à la question suivante:', error);
    }
  }

  endGame() {
    this.quizService.setStep('end');
  }

  
  // Réinitialisation complète du quiz (étape, participants, index, réponses)
  async resetQuiz() {
    try {
      await this.quizService.resetParticipants();
      await this.quizService.resetAllAnswers();
      await this.quizService.setStep('lobby');
    } catch (error) {
      console.error('[RESET] ❌ Erreur lors de la réinitialisation:', error);
      const errorMsg = error instanceof Error ? error.message : 'Erreur inconnue';
      alert(`Erreur lors de la réinitialisation du quiz: ${errorMsg}`);
    }
    this.timerValue = 20;
    this.voters = [];

    // Arrêter les subscriptions existantes pour éviter les logs répétés
    this.subscriptions.forEach(sub => sub.unsubscribe());
    this.subscriptions = [];

    this.refresh();
  }

  // Méthodes de gestion des images pour éviter le flash
  onImageLoaded() {
    this.imageLoaded = true;
  }

  onImageError() {
    this.imageLoaded = false;
    console.warn('Erreur de chargement de l\'image:', this.currentQuestion?.imageUrl);
  }

  onResultImageLoaded() {
    this.resultImageLoaded = true;
  }

  onResultImageError() {
    this.resultImageLoaded = false;
    console.warn('Erreur de chargement de l\'image résultat:', this.currentQuestion?.imageUrlResult);
  }

  // TrackBy function pour forcer la recréation des éléments d'image
  trackByQuestionId(index: number, question: any): any {
    return question?.id || index;
  }

  // ===== MÉTHODES POUR LA PHOTO DE GROUPE =====

  async startCamera(): Promise<void> {
    try {
      // Calculer la résolution optimale basée sur l'écran
      const screenWidth = window.screen.width;
      const screenHeight = window.screen.height;
      const aspectRatio = screenWidth / screenHeight;

      // Demander une résolution adaptée à l'écran
      let videoConstraints: MediaTrackConstraints = {
        facingMode: 'user' // Caméra frontale par défaut
      };

      // Adapter la résolution demandée à l'écran
      if (aspectRatio > 1.5) {
        // Écran large (16:9 ou plus)
        videoConstraints.width = { ideal: Math.min(1920, screenWidth * 0.9) };
        videoConstraints.height = { ideal: Math.min(1080, screenHeight * 0.9) };
      } else {
        // Écran plus carré
        videoConstraints.width = { ideal: Math.min(1280, screenWidth * 0.9) };
        videoConstraints.height = { ideal: Math.min(720, screenHeight * 0.9) };
      }

      console.log('📹 Demande de résolution caméra:', videoConstraints);

      this.cameraStream = await navigator.mediaDevices.getUserMedia({
        video: videoConstraints,
        audio: false
      });

      this.cameraActive = true;
      this.cameraReady = false;
      this.showCameraModal = true;

      // Attendre que le DOM soit mis à jour
      setTimeout(() => {
        const videoElement = document.getElementById('cameraVideo') as HTMLVideoElement;
        if (videoElement && this.cameraStream) {
          console.log('📹 Configuration de l\'élément vidéo...');
          console.log('VideoElement trouvé:', !!videoElement);
          console.log('CameraStream disponible:', !!this.cameraStream);

          // Forcer l'affichage de la vidéo
          videoElement.style.display = 'block';
          videoElement.style.opacity = '1';
          videoElement.style.visibility = 'visible';
          videoElement.style.background = 'blue'; // Pour voir si l'élément est visible

          videoElement.srcObject = this.cameraStream;

          // Attendre que les métadonnées de la vidéo soient chargées
          videoElement.onloadedmetadata = () => {
            console.log(`📹 Métadonnées chargées: ${videoElement.videoWidth}x${videoElement.videoHeight}`);
            console.log('📹 ReadyState:', videoElement.readyState);
            console.log('📹 Style computed:', window.getComputedStyle(videoElement).display);

            // Ajuster le container pour maintenir le ratio
            const container = videoElement.closest('.camera-container') as HTMLElement;
            if (container) {
              const ratio = videoElement.videoHeight / videoElement.videoWidth;
              container.style.aspectRatio = `${videoElement.videoWidth} / ${videoElement.videoHeight}`;
              console.log('📹 Container aspect ratio défini:', container.style.aspectRatio);
            }
          };

          // S'assurer que la vidéo est bien en cours de lecture
          videoElement.oncanplay = () => {
            console.log('📹 Vidéo prête pour la capture (canplay)');
            console.log('📹 Video playing:', !videoElement.paused && !videoElement.ended && videoElement.readyState > 2);
            this.cameraReady = true;
          };

          videoElement.onloadeddata = () => {
            console.log('📹 Données vidéo chargées (loadeddata)');
            // Test si le stream est bien connecté
            if (videoElement.srcObject === this.cameraStream) {
              console.log('✅ Stream correctement assigné à la vidéo');
            } else {
              console.error('❌ Stream non assigné correctement');
              // Réessayer d'assigner le stream
              videoElement.srcObject = this.cameraStream;
            }
          };

          videoElement.onplaying = () => {
            console.log('📹 Vidéo en cours de lecture (playing)');
          };

          videoElement.play().then(() => {
            console.log('📹 Lecture vidéo démarrée avec succès');
            // Double vérification après 1 seconde
            setTimeout(() => {
              if (videoElement.readyState >= 2 && videoElement.videoWidth > 0) {
                this.cameraReady = true;
                console.log('📹 Caméra confirmée prête');
                console.log('📹 État final - Paused:', videoElement.paused, 'Ended:', videoElement.ended, 'ReadyState:', videoElement.readyState);
              }
            }, 1000);
          }).catch(err => {
            console.error('❌ Erreur de lecture vidéo:', err);
          });
        } else {
          console.error('❌ Élément vidéo ou stream introuvable');
          console.log('VideoElement:', !!videoElement);
          console.log('CameraStream:', !!this.cameraStream);
        }
      }, 100);

      console.log('✅ Caméra démarrée avec succès');
    } catch (error) {
      console.error('❌ Erreur d\'accès à la caméra:', error);
      alert('Impossible d\'accéder à la caméra. Vérifiez les permissions du navigateur.');
    }
  }

  async takeGroupPhoto(): Promise<void> {
    try {
      const videoElement = document.getElementById('cameraVideo') as HTMLVideoElement;

      if (!videoElement || !this.cameraStream) {
        console.error('Éléments caméra introuvables');
        return;
      }

      // Vérifier que la vidéo est bien en cours de lecture
      if (videoElement.readyState < 2) {
        console.error('Vidéo pas encore prête, readyState:', videoElement.readyState);
        alert('La caméra n\'est pas encore prête. Veuillez attendre quelques secondes et réessayer.');
        return;
      }

      // Vérifier les dimensions de la vidéo
      const videoWidth = videoElement.videoWidth;
      const videoHeight = videoElement.videoHeight;

      console.log(`📹 Dimensions vidéo: ${videoWidth}x${videoHeight}`);

      if (videoWidth === 0 || videoHeight === 0) {
        console.error('Dimensions vidéo invalides');
        alert('Erreur: dimensions de la vidéo invalides. Veuillez relancer la caméra.');
        return;
      }

      // Créer le canvas avec les bonnes dimensions
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');

      if (!ctx) {
        console.error('Impossible de créer le contexte 2D');
        return;
      }

      // Définir les dimensions du canvas
      canvas.width = videoWidth;
      canvas.height = videoHeight;

      console.log(`🎨 Canvas créé: ${canvas.width}x${canvas.height}`);

      // Capturer l'image de la vidéo
      ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);

      // Vérifier que quelque chose a été capturé (pixel test)
      const imageData = ctx.getImageData(0, 0, Math.min(10, canvas.width), Math.min(10, canvas.height));
      const hasContent = Array.from(imageData.data).some(value => value !== 0);

      if (!hasContent) {
        console.error('⚠️ Canvas semble vide, tentative avec délai...');
        // Attendre un peu et réessayer
        await new Promise(resolve => setTimeout(resolve, 500));
        ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
      }

      // Ajouter l'overlay "Promotion 2025"
      this.addPromotionOverlay(ctx, canvas.width, canvas.height);

      // Télécharger l'image
      const link = document.createElement('a');
      const now = new Date();
      const timestamp = now.toISOString().replace(/[:.]/g, '-').split('T')[0];
      link.download = `quiz-promotion-2025-${timestamp}.jpg`;

      // Utiliser une qualité plus élevée pour une meilleure image
      link.href = canvas.toDataURL('image/jpeg', 0.95);

      // Déboguer: afficher la taille du dataURL
      console.log(`📸 Taille de l'image générée: ${link.href.length} caractères`);

      link.click();

      this.photoTaken = true;
      console.log('✅ Photo de groupe prise avec succès !');

      // Fermer la caméra après 2 secondes
      setTimeout(() => {
        this.stopCamera();
      }, 2000);

    } catch (error) {
      console.error('❌ Erreur lors de la prise de photo:', error);
      alert('Erreur lors de la capture de la photo. Veuillez réessayer.');
    }
  }

  private addPromotionOverlay(ctx: CanvasRenderingContext2D, width: number, height: number): void {
    // Fond semi-transparent pour le texte
    ctx.fillStyle = 'rgba(35, 37, 38, 0.8)';
    ctx.fillRect(0, height - 100, width, 100);

    // Texte principal "Quiz Promotion 2025"
    ctx.fillStyle = '#f6d365';
    ctx.font = 'bold 32px Arial, sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('🏆 Quiz Promotion 2025', width / 2, height - 60);

    // Date
    const now = new Date();
    ctx.font = '18px Arial, sans-serif';
    ctx.fillStyle = '#fff';
    ctx.fillText(now.toLocaleDateString('fr-FR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    }), width / 2, height - 25);

    // Décoration coins
    ctx.fillStyle = '#DAE72A';
    ctx.font = '24px Arial, sans-serif';
    ctx.textAlign = 'left';
    ctx.fillText('🌟', 20, height - 40);
    ctx.textAlign = 'right';
    ctx.fillText('🌟', width - 20, height - 40);
  }

  stopCamera(): void {
    if (this.cameraStream) {
      // Arrêter tous les tracks de la caméra
      this.cameraStream.getTracks().forEach(track => {
        track.stop();
      });
      this.cameraStream = null;
    }

    this.cameraActive = false;
    this.cameraReady = false;
    this.showCameraModal = false;
    this.photoTaken = false;
    console.log('✅ Caméra fermée');
  }

  getCurrentDate(): string {
    return new Date().toLocaleDateString('fr-FR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  }

  // ===== FIN MÉTHODES PHOTO DE GROUPE =====

  // Méthode de capture graphique du leaderboard final
  async captureLeaderboard(): Promise<void> {
    try {
      // Sélectionner un élément plus large incluant le titre
      const element = document.querySelector('.container-question');
      if (!element) {
        console.error('Élément container-question introuvable pour la capture');
        return;
      }

      // Configuration html2canvas pour un rendu optimal
      const canvas = await html2canvas(element as HTMLElement, {
        backgroundColor: '#F1F1F1',
        scale: 2, // Haute résolution
        useCORS: true,
        allowTaint: false,
        width: (element as HTMLElement).offsetWidth,
        height: (element as HTMLElement).offsetHeight,
        scrollX: 0,
        scrollY: 0,
        windowWidth: window.innerWidth,
        windowHeight: window.innerHeight,
        ignoreElements: (element) => {
          // Ignorer les boutons dans la capture
          return element.classList?.contains('step-final-buttons') || false;
        }
      });

      // Créer un contexte pour ajouter des informations supplémentaires
      const finalCanvas = document.createElement('canvas');
      const ctx = finalCanvas.getContext('2d');

      if (!ctx) return;

      // Dimensions du canvas final avec espace pour les métadonnées
      const padding = 40;
      const headerHeight = 60;
      const footerHeight = 40;
      finalCanvas.width = canvas.width + (padding * 2);
      finalCanvas.height = canvas.height + headerHeight + footerHeight + (padding * 2);

      // Fond du canvas final
      ctx.fillStyle = '#F1F1F1';
      ctx.fillRect(0, 0, finalCanvas.width, finalCanvas.height);

      // Header avec titre
      ctx.fillStyle = '#232526';
      ctx.font = 'bold 28px Arial, sans-serif';
      ctx.textAlign = 'center';
      ctx.fillText('🏆 Quiz Application - Final Results', finalCanvas.width / 2, 35);

      // Ligne de séparation
      ctx.strokeStyle = '#ddd';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(padding, headerHeight - 10);
      ctx.lineTo(finalCanvas.width - padding, headerHeight - 10);
      ctx.stroke();

      // Dessiner le leaderboard capturé
      ctx.drawImage(canvas, padding, headerHeight + padding);

      // Footer avec date et heure
      const now = new Date();
      ctx.font = '14px Arial, sans-serif';
      ctx.fillStyle = '#666';
      ctx.textAlign = 'center';
      ctx.fillText(`Generated on ${now.toLocaleString('fr-FR')}`, finalCanvas.width / 2, finalCanvas.height - 15);

      // Télécharger l'image
      const link = document.createElement('a');
      const timestamp = now.toISOString().replace(/[:.]/g, '-').split('T')[0];
      link.download = `quiz-final-results-${timestamp}.png`;
      link.href = finalCanvas.toDataURL('image/png', 0.95);
      link.click();

      console.log('✅ Capture du leaderboard réussie !');
    } catch (error) {
      console.error('❌ Erreur lors de la capture:', error);
    }
  }

  // Méthodes de gestion admin
  extendSession(): void {
    this.adminAuthService.extendSession();
  }

  logout(): void {
    if (confirm('Êtes-vous sûr de vouloir vous déconnecter ?')) {
      this.adminAuthService.logout();
      this.router.navigate(['/admin-login']);
    }
  }

  getRemainingTime(): string {
    return this.adminAuthService.getFormattedRemainingTime();
  }

  // Méthodes de restauration
  async onRestoreGame(): Promise<void> {
    if (!this.buttonsEnabled) return;

    // Attendre le temps minimum d'affichage du modal
    const elapsedTime = Date.now() - this.modalStartTime;
    if (elapsedTime < this.minModalDisplayTime) {
      await new Promise(resolve => setTimeout(resolve, this.minModalDisplayTime - elapsedTime));
    }

    try {
      console.log('🔄 Tentative de restauration de la partie...');

      const restored = await this.quizService.restoreGameState();
      if (restored) {
        this.showRestoreDialog = false;

        // Synchroniser l'état local avec l'état restauré
        this.participants = this.quizService.participants;

        // Récupérer l'étape actuelle du serveur
        try {
          const gameState = await this.quizService.getGameState();
          this.step = gameState?.step || 'lobby';

          // Si on est dans une question, synchroniser le timer
          if (this.step === 'question') {
            console.log('🕐 Restauration pendant une question, synchronisation du timer');
            await this.syncTimerWithServer();
          }

        } catch (error) {
          console.warn('Erreur lors de la récupération de l\'étape, utilisation de lobby par défaut');
          this.step = 'lobby';
        }

        console.log('✅ Partie restaurée avec succès !');

      } else {
        console.error('❌ Impossible de restaurer la partie');
        this.onStartNewGame();
      }
    } catch (error) {
      console.error('❌ Erreur lors de la restauration:', error);
      this.onStartNewGame();
    }
  }

  onStartNewGame(): void {
    if (!this.buttonsEnabled) return;

    // Attendre le temps minimum d'affichage du modal
    const elapsedTime = Date.now() - this.modalStartTime;
    if (elapsedTime < this.minModalDisplayTime) {
      setTimeout(() => {
        this.actuallyStartNewGame();
      }, this.minModalDisplayTime - elapsedTime);
    } else {
      this.actuallyStartNewGame();
    }
  }

  private actuallyStartNewGame(): void {
    console.log('🆕 Démarrage d\'une nouvelle partie');
    this.showRestoreDialog = false;

    // Effacer la sauvegarde précédente
    this.quizService.clearSavedGameState();

    // Initialiser une nouvelle partie
    this.initializeNewGame();
  }

  /**
   * Synchronise l'état local avec l'état du serveur
   */
  private async synchronizeWithServer(serverState: any): Promise<void> {
    try {
      console.log('🔄 Synchronisation avec l\'état du serveur:', serverState);

      // Initialiser les composants de base
      this.quizService.initQuestions();

      // Synchroniser l'étape
      this.step = serverState.step || 'lobby';

      // Initialiser les souscriptions avec force pour s'assurer de la synchronisation
      this.initializeSubscriptions(true);

      // Récupérer la liste des participants depuis le serveur
      try {
        const participants = await this.quizService.fetchParticipantsFromServer();
        this.participants = participants || [];
        console.log('👥 Participants synchronisés:', this.participants.length);

        // Forcer la détection des changements pour que l'UI se mette à jour
        this.cdr.detectChanges();
        console.log('🔄 Détection des changements forcée pour les participants');
      } catch (error) {
        console.warn('⚠️ Impossible de récupérer les participants:', error);
        this.participants = [];
      }

      // Si on est dans une question, synchroniser l'index et le timer
      if (serverState.step === 'question') {
        this.currentIndex = serverState.currentQuestionIndex || 0;
        this.currentQuestion = this.quizService.getCurrentQuestion(this.currentIndex);

        // Synchroniser le timer si nécessaire
        if (serverState.questionStartTime && serverState.questionStartTime > 0) {
          // Timer déjà démarré sur le serveur, marquer comme démarré manuellement
          this.timerStartedManually = true;
          console.log('[SYNC] Timer déjà démarré côté serveur, timerStartedManually = true');
          this.checkAndSyncTimer();
        } else {
          // Timer pas encore démarré, rester en attente
          this.timerStartedManually = false;
          console.log('[SYNC] Timer pas encore démarré côté serveur, timerStartedManually = false');
        }
      }

      // Si on est dans les résultats, synchroniser l'index de la question
      if (serverState.step === 'result') {
        this.currentIndex = serverState.currentQuestionIndex || 0;
        this.currentQuestion = this.quizService.getCurrentQuestion(this.currentIndex);
      }

      // Forcer la détection des changements
      this.cdr.detectChanges();

      console.log('✅ Synchronisation terminée:', {
        step: this.step,
        currentIndex: this.currentIndex,
        participants: this.participants.length
      });

    } catch (error) {
      console.error('❌ Erreur lors de la synchronisation:', error);
      throw error;
    }
  }
  
  // Méthodes de restauration
  async onRestoreGame(): Promise<void> {
    if (!this.buttonsEnabled) return;

    // Attendre le temps minimum d'affichage du modal
    const elapsedTime = Date.now() - this.modalStartTime;
    if (elapsedTime < this.minModalDisplayTime) {
      await new Promise(resolve => setTimeout(resolve, this.minModalDisplayTime - elapsedTime));
    }

    try {
      console.log('🔄 Tentative de restauration de la partie...');

      const restored = await this.quizService.restoreGameState();
      if (restored) {
        this.showRestoreDialog = false;

        // Synchroniser l'état local avec l'état restauré
        this.participants = this.quizService.participants;

        // Récupérer l'étape actuelle du serveur
        try {
          const gameState = await this.quizService.getGameState();
          this.step = gameState?.step || 'lobby';

          // Si on est dans une question, synchroniser le timer
          if (this.step === 'question') {
            console.log('🕐 Restauration pendant une question, synchronisation du timer');
            await this.syncTimerWithServer();
          }

        } catch (error) {
          console.warn('Erreur lors de la récupération de l\'étape, utilisation de lobby par défaut');
          this.step = 'lobby';
        }

        console.log('✅ Partie restaurée avec succès !');

      } else {
        console.error('❌ Impossible de restaurer la partie');
        this.onStartNewGame();
      }
    } catch (error) {
      console.error('❌ Erreur lors de la restauration:', error);
      this.onStartNewGame();
    }
  }

  onStartNewGame(): void {
    if (!this.buttonsEnabled) return;

    // Attendre le temps minimum d'affichage du modal
    const elapsedTime = Date.now() - this.modalStartTime;
    if (elapsedTime < this.minModalDisplayTime) {
      setTimeout(() => {
        this.actuallyStartNewGame();
      }, this.minModalDisplayTime - elapsedTime);
    } else {
      this.actuallyStartNewGame();
    }
  }

  private actuallyStartNewGame(): void {
    console.log('🆕 Démarrage d\'une nouvelle partie');
    this.showRestoreDialog = false;

    // Effacer la sauvegarde précédente
    this.quizService.clearSavedGameState();

    // Initialiser une nouvelle partie
    this.initializeNewGame();
  }

  // Système de loading pour synchroniser avec les joueurs
  private showLoadingForTransition(type: string) {
    this.isLoading = true;
    this.loadingType = type;
    this.loadingMessage = this.getLoadingMessage(type);
    console.log('[PRESENTATION][LOADING] Transition:', type, 'Message:', this.loadingMessage);
  }

  private getLoadingMessage(type: string): string {
    switch (type) {
      case 'question-start': return 'Synchronisation...';
      case 'question-result': return 'Résultats...';
      case 'next-question': return 'Préparation...';
      case 'quiz-end': return 'Terminé !';
      default: return 'Synchronisation...';
    }
  }

  // Gestion des actions spécifiques aux étapes pour la présentation
  private handleStepActivationPresentation(step: QuizStep) {
    console.log('[PRESENTATION][STEP-ACTIVATION] Traitement de l\'étape:', step);

    if (step === 'question') {
      // Réinitialiser le flag de démarrage manuel pour chaque nouvelle question
      this.timerStartedManually = false;
      // Ne plus démarrer automatiquement le timer - attendre le démarrage manuel
      console.log('[MANUAL-TIMER] Question affichée, en attente de démarrage manuel du timer');
    } else {
      this.stopTimer();
      this.timerStartedManually = false;
    }

    // Réinitialisation des réponses lors du retour à l'étape lobby
    if (step === 'lobby') {
      this.quizService.resetAllAnswers();
    }
  }

  // Démarrage manuel du timer (synchronisé avec tous les clients via WebSocket)
  async startTimerManually(duration: number = 20) {
    console.log('[MANUAL-TIMER] Démarrage manuel du timer pour', duration, 'secondes');

    try {
      const response = await fetch(`${this.apiUrl}/start-timer`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          duration: duration,
          currentQuestionIndex: this.currentIndex
        })
      });

      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }

      const result = await response.json();
      console.log('[MANUAL-TIMER] Timer démarré avec succès:', result);

      this.timerStartedManually = true;

    } catch (error) {
      console.error('[MANUAL-TIMER] Erreur lors du démarrage du timer:', error);
      // Fallback: démarrer localement si le serveur ne répond pas
      this.timerStartedManually = true;
    }
  }

  refresh() {
    // this.participants = ... supprimé, car synchro via API SQLite
    const previousQuestion = this.currentQuestion;
    this.currentQuestion = this.quizService.getCurrentQuestion(this.currentIndex);

    // Reset image loaded state IMMEDIATELY when question changes to prevent flash
    if (previousQuestion?.id !== this.currentQuestion?.id) {
      this.imageLoaded = false;
      this.resultImageLoaded = false;
      this.hideImages = false; // Allow images to show for new question
      console.log('[DEBUG][REFRESH] Image states reset due to question change');
    }

    // Ne pas écraser le leaderboard dynamique ici !

    console.log('[DEBUG][REFRESH] currentQuestion:', this.currentQuestion);
    console.log('[DEBUG][REFRESH] answersCount:', this.answersCount);
    console.log('[DEBUG][REFRESH] currentIndex:', this.currentIndex);

    if (this.currentQuestion && this.answersCount) {
      console.log('[DEBUG][REFRESH] correctIndex:', this.currentQuestion.correctIndex);
      this.totalGood = this.answersCount[this.currentQuestion.correctIndex] || 0;
      this.totalAnswers = this.answersCount.reduce((a, b) => a + b, 0);
      this.totalBad = this.totalAnswers - this.totalGood;

      console.log('[DEBUG][REFRESH] Calculated values:', {
        totalGood: this.totalGood,
        totalBad: this.totalBad,
        totalAnswers: this.totalAnswers
      });
    } else {
      this.totalGood = 0;
      this.totalAnswers = 0;
      this.totalBad = 0;
      console.log('[DEBUG][REFRESH] Reset to 0 - missing currentQuestion or answersCount');
    }
  }
  async launchGame() {
    // Passe à l'étape "waiting" avant de lancer la première question
    console.log("[DEBUG] launchGame() appelé - Passage à l'étape \"waiting\"");
    try {
      const success = await this.quizService.setStep('waiting');
      console.log("[DEBUG] Étape \"waiting\" définie avec succès =", success);
      
      // Force la vérification de l'état après un court délai pour s'assurer que la transition a eu lieu
      setTimeout(async () => {
        const currentStep = await this.quizService.forceCheckState();
        console.log("[DEBUG] Vérification d'état après transition: step =", currentStep);
        
        if (currentStep !== 'waiting') {
          console.error("[DEBUG] ERREUR: L'état n'est pas passé à \"waiting\" comme prévu");
          // Nouvelle tentative
          console.log("[DEBUG] Nouvelle tentative de passage à l'étape \"waiting\"");
          await this.quizService.setStep('waiting');
        }
      }, 1000);
    } catch (error) {
      console.error("[ERROR] Erreur lors du passage à l'étape \"waiting\":", error);
    }
  }

  // Méthode à appeler pour vraiment démarrer la première question après l'attente
  async startFirstQuestion() {
    // Démarre la première question via l'API HTTP
    try {
      // Utilise nextQuestion(-1) pour forcer le passage à l'index 0 avec initialisation du timer
      await this.quizService.nextQuestion(-1);
      console.log('[INFO] First question started via HTTP API');
    } catch (error) {
      console.error('Erreur lors du démarrage de la première question:', error);
    }
  }

  startTimer() {
    this.stopTimer();
    this.syncTimerWithServer();
  }

  private async checkAndSyncTimer() {
    try {
      const gameState = await this.quizService.getGameState();

      if (gameState?.questionStartTime) {
        // Le serveur a déjà un questionStartTime, synchroniser
        console.log('🕐 Question déjà démarrée côté serveur, synchronisation...');
        this.syncTimerWithServer();
      } else {
        // Pas de questionStartTime côté serveur, ne pas démarrer le timer
        console.log('⏸️ Pas de timer côté serveur, service centralisé gère l\'état');
        // Le service centralisé gère l'état par défaut
      }
    } catch (error) {
      console.warn('Erreur vérification timer serveur, service centralisé prend le relais:', error);
      // Le service centralisé gère l'état par défaut en cas d'erreur
    }
  }

  private async syncTimerWithServer() {
    try {
      console.log('🕐 [PRESENTATION] Synchronisation timer centralisée (auto-démarrage)');

      // S'abonner aux mises à jour du timer centralisé (démarrage automatique)
      if (this.timerSub) this.timerSub.unsubscribe();

      this.timerSub = this.timerService.getCountdown().subscribe(timerState => {
        const countdown = timerState.countdownToStart || 0;

        if (countdown > 0) {
          // Mode countdown avant démarrage
          this.timerValue = countdown;
          this.timerMax = countdown;
          console.log(`⏳ [PRESENTATION] Countdown: Question démarre dans ${countdown}s`);
        } else {
          // Mode timer normal
          this.timerValue = timerState.timeRemaining;
          this.timerMax = timerState.timerMax;
          console.log(`🕐 [PRESENTATION] Timer: ${timerState.timeRemaining}s/${timerState.timerMax}s, active: ${timerState.isActive}`);

          if (timerState.timeRemaining <= 0 && timerState.isActive === false) {
            this.showResult();
          }
        }
      });

      // Le service centralisé gère la synchronisation initiale automatiquement
      console.log('🕐 [PRESENTATION] Service centralisé actif, synchronisation automatique');

    } catch (error) {
      console.warn('Erreur synchronisation timer, fallback au service centralisé:', error);
      // Fallback: utiliser le service centralisé avec démarrage simple
      this.timerService.start(20);
    }
  }

  // DEPRECATED: Ancienne méthode remplacée par le service timer centralisé
  private startTimerNormal_DEPRECATED(duration: number = 20) {
    console.warn('⚠️ startTimerNormal_DEPRECATED appelée - utiliser le service centralisé à la place');
    // Ne plus utiliser cette méthode, utiliser timerService.startServerSync() à la place
    this.timerService.start(duration);
  }

  stopTimer() {
    if (this.timerSub) this.timerSub.unsubscribe();
    this.timerService.stopServerSync(); // Arrêter la synchronisation centralisée
  }

  showResult() {
    // DEBUG : log état avant passage à l'étape résultat
    // Reset image states IMMEDIATELY to prevent any flash
    this.imageLoaded = false;
    this.resultImageLoaded = false;
    // Force immediate UI update to hide images instantly
    this.cdr.detectChanges();

    // On force la mise à jour des données avant d'afficher le résultat
    const previousQuestion = this.currentQuestion;
    this.currentQuestion = this.quizService.getCurrentQuestion(this.currentIndex);

    // answersCount est toujours à jour via l'abonnement (voir ngOnInit)
    if (this.currentQuestion && this.answersCount && Array.isArray(this.answersCount)) {
      this.totalGood = this.answersCount[this.currentQuestion.correctIndex] || 0;
      this.totalAnswers = this.answersCount.reduce((a, b) => a + b, 0);
      this.totalBad = this.totalAnswers - this.totalGood;
    } else {
      this.totalGood = 0;
      this.totalAnswers = 0;
      this.totalBad = 0;
    }
    // Passage à l'étape résultat avec délai pour laisser le flux RxJS se mettre à jour
    setTimeout(() => {
      this.quizService.setStep('result');
      this.step = 'result'; // Synchronisation immédiate pour le template
      this.refresh(); // Correction : forcer la mise à jour des données juste après le changement d'étape
      this.cdr.markForCheck();
      // Log après le changement d'étape
      console.log('[DEBUG][RESULT] step:', this.step, 'currentQuestion:', this.currentQuestion, 'answersCount:', this.answersCount);
    }, 120);
  }

  async nextQuestion() {
    // Incrémente l'index et passe à la question suivante via l'API
    try {
      console.log('[PRESENTATION] Next question via HTTP API, current index:', this.currentIndex);

      // Hide images immediately - most aggressive approach
      this.hideImages = true;
      this.imageLoaded = false;
      this.resultImageLoaded = false;

      // Reset timer immediately to sync with image change
      this.timerValue = 0;
      this.stopTimer();

      // Force immediate UI update to hide images instantly and show empty timer
      this.cdr.detectChanges();

      // Petit délai pour laisser l'interface se mettre à jour
      await new Promise(resolve => setTimeout(resolve, 50));

      // Reset timer to full immediately for visual sync
      this.timerValue = 20;
      this.timerMax = 20;
      this.cdr.detectChanges();

      // CORRECTION: Un seul appel qui gère tout (index + step + timer)
      await this.quizService.nextQuestion(this.currentIndex);
      console.log('[PRESENTATION] Question suivante appelée, nouvel index:', this.currentIndex + 1);
    } catch (error) {
      console.error('[PRESENTATION] Erreur lors du passage à la question suivante:', error);
    }
  }

  endGame() {
    this.quizService.setStep('end');
  }

  
  // Réinitialisation complète du quiz (étape, participants, index, réponses)
  async resetQuiz() {
    try {
      await this.quizService.resetParticipants();
      await this.quizService.resetAllAnswers();
      await this.quizService.setStep('lobby');
    } catch (error) {
      console.error('[RESET] ❌ Erreur lors de la réinitialisation:', error);
      const errorMsg = error instanceof Error ? error.message : 'Erreur inconnue';
      alert(`Erreur lors de la réinitialisation du quiz: ${errorMsg}`);
    }
    this.timerValue = 20;
    this.voters = [];

    // Arrêter les subscriptions existantes pour éviter les logs répétés
    this.subscriptions.forEach(sub => sub.unsubscribe());
    this.subscriptions = [];

    this.refresh();
  }

  // Méthodes de gestion des images pour éviter le flash
  onImageLoaded() {
    this.imageLoaded = true;
  }

  onImageError() {
    this.imageLoaded = false;
    console.warn('Erreur de chargement de l\'image:', this.currentQuestion?.imageUrl);
  }

  onResultImageLoaded() {
    this.resultImageLoaded = true;
  }

  onResultImageError() {
    this.resultImageLoaded = false;
    console.warn('Erreur de chargement de l\'image résultat:', this.currentQuestion?.imageUrlResult);
  }

  // TrackBy function pour forcer la recréation des éléments d'image
  trackByQuestionId(index: number, question: any): any {
    return question?.id || index;
  }

  // ===== MÉTHODES POUR LA PHOTO DE GROUPE =====

  async startCamera(): Promise<void> {
    try {
      // Calculer la résolution optimale basée sur l'écran
      const screenWidth = window.screen.width;
      const screenHeight = window.screen.height;
      const aspectRatio = screenWidth / screenHeight;

      // Demander une résolution adaptée à l'écran
      let videoConstraints: MediaTrackConstraints = {
        facingMode: 'user' // Caméra frontale par défaut
      };

      // Adapter la résolution demandée à l'écran
      if (aspectRatio > 1.5) {
        // Écran large (16:9 ou plus)
        videoConstraints.width = { ideal: Math.min(1920, screenWidth * 0.9) };
        videoConstraints.height = { ideal: Math.min(1080, screenHeight * 0.9) };
      } else {
        // Écran plus carré
        videoConstraints.width = { ideal: Math.min(1280, screenWidth * 0.9) };
        videoConstraints.height = { ideal: Math.min(720, screenHeight * 0.9) };
      }

      console.log('📹 Demande de résolution caméra:', videoConstraints);

      this.cameraStream = await navigator.mediaDevices.getUserMedia({
        video: videoConstraints,
        audio: false
      });

      this.cameraActive = true;
      this.cameraReady = false;
      this.showCameraModal = true;

      // Attendre que le DOM soit mis à jour
      setTimeout(() => {
        const videoElement = document.getElementById('cameraVideo') as HTMLVideoElement;
        if (videoElement && this.cameraStream) {
          console.log('📹 Configuration de l\'élément vidéo...');
          console.log('VideoElement trouvé:', !!videoElement);
          console.log('CameraStream disponible:', !!this.cameraStream);

          // Forcer l'affichage de la vidéo
          videoElement.style.display = 'block';
          videoElement.style.opacity = '1';
          videoElement.style.visibility = 'visible';
          videoElement.style.background = 'blue'; // Pour voir si l'élément est visible

          videoElement.srcObject = this.cameraStream;

          // Attendre que les métadonnées de la vidéo soient chargées
          videoElement.onloadedmetadata = () => {
            console.log(`📹 Métadonnées chargées: ${videoElement.videoWidth}x${videoElement.videoHeight}`);
            console.log('📹 ReadyState:', videoElement.readyState);
            console.log('📹 Style computed:', window.getComputedStyle(videoElement).display);

            // Ajuster le container pour maintenir le ratio
            const container = videoElement.closest('.camera-container') as HTMLElement;
            if (container) {
              const ratio = videoElement.videoHeight / videoElement.videoWidth;
              container.style.aspectRatio = `${videoElement.videoWidth} / ${videoElement.videoHeight}`;
              console.log('📹 Container aspect ratio défini:', container.style.aspectRatio);
            }
          };

          // S'assurer que la vidéo est bien en cours de lecture
          videoElement.oncanplay = () => {
            console.log('📹 Vidéo prête pour la capture (canplay)');
            console.log('📹 Video playing:', !videoElement.paused && !videoElement.ended && videoElement.readyState > 2);
            this.cameraReady = true;
          };

          videoElement.onloadeddata = () => {
            console.log('📹 Données vidéo chargées (loadeddata)');
            // Test si le stream est bien connecté
            if (videoElement.srcObject === this.cameraStream) {
              console.log('✅ Stream correctement assigné à la vidéo');
            } else {
              console.error('❌ Stream non assigné correctement');
              // Réessayer d'assigner le stream
              videoElement.srcObject = this.cameraStream;
            }
          };

          videoElement.onplaying = () => {
            console.log('📹 Vidéo en cours de lecture (playing)');
          };

          videoElement.play().then(() => {
            console.log('📹 Lecture vidéo démarrée avec succès');
            // Double vérification après 1 seconde
            setTimeout(() => {
              if (videoElement.readyState >= 2 && videoElement.videoWidth > 0) {
                this.cameraReady = true;
                console.log('📹 Caméra confirmée prête');
                console.log('📹 État final - Paused:', videoElement.paused, 'Ended:', videoElement.ended, 'ReadyState:', videoElement.readyState);
              }
            }, 1000);
          }).catch(err => {
            console.error('❌ Erreur de lecture vidéo:', err);
          });
        } else {
          console.error('❌ Élément vidéo ou stream introuvable');
          console.log('VideoElement:', !!videoElement);
          console.log('CameraStream:', !!this.cameraStream);
        }
      }, 100);

      console.log('✅ Caméra démarrée avec succès');
    } catch (error) {
      console.error('❌ Erreur d\'accès à la caméra:', error);
      alert('Impossible d\'accéder à la caméra. Vérifiez les permissions du navigateur.');
    }
  }

  async takeGroupPhoto(): Promise<void> {
    try {
      const videoElement = document.getElementById('cameraVideo') as HTMLVideoElement;

      if (!videoElement || !this.cameraStream) {
        console.error('Éléments caméra introuvables');
        return;
      }

      // Vérifier que la vidéo est bien en cours de lecture
      if (videoElement.readyState < 2) {
        console.error('Vidéo pas encore prête, readyState:', videoElement.readyState);
        alert('La caméra n\'est pas encore prête. Veuillez attendre quelques secondes et réessayer.');
        return;
      }

      // Vérifier les dimensions de la vidéo
      const videoWidth = videoElement.videoWidth;
      const videoHeight = videoElement.videoHeight;

      console.log(`📹 Dimensions vidéo: ${videoWidth}x${videoHeight}`);

      if (videoWidth === 0 || videoHeight === 0) {
        console.error('Dimensions vidéo invalides');
        alert('Erreur: dimensions de la vidéo invalides. Veuillez relancer la caméra.');
        return;
      }

      // Créer le canvas avec les bonnes dimensions
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');

      if (!ctx) {
        console.error('Impossible de créer le contexte 2D');
        return;
      }

      // Définir les dimensions du canvas
      canvas.width = videoWidth;
      canvas.height = videoHeight;

      console.log(`🎨 Canvas créé: ${canvas.width}x${canvas.height}`);

      // Capturer l'image de la vidéo
      ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);

      // Vérifier que quelque chose a été capturé (pixel test)
      const imageData = ctx.getImageData(0, 0, Math.min(10, canvas.width), Math.min(10, canvas.height));
      const hasContent = Array.from(imageData.data).some(value => value !== 0);

      if (!hasContent) {
        console.error('⚠️ Canvas semble vide, tentative avec délai...');
        // Attendre un peu et réessayer
        await new Promise(resolve => setTimeout(resolve, 500));
        ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
      }

      // Ajouter l'overlay "Promotion 2025"
      this.addPromotionOverlay(ctx, canvas.width, canvas.height);

      // Télécharger l'image
      const link = document.createElement('a');
      const now = new Date();
      const timestamp = now.toISOString().replace(/[:.]/g, '-').split('T')[0];
      link.download = `quiz-promotion-2025-${timestamp}.jpg`;

      // Utiliser une qualité plus élevée pour une meilleure image
      link.href = canvas.toDataURL('image/jpeg', 0.95);

      // Déboguer: afficher la taille du dataURL
      console.log(`📸 Taille de l'image générée: ${link.href.length} caractères`);

      link.click();

      this.photoTaken = true;
      console.log('✅ Photo de groupe prise avec succès !');

      // Fermer la caméra après 2 secondes
      setTimeout(() => {
        this.stopCamera();
      }, 2000);

    } catch (error) {
      console.error('❌ Erreur lors de la prise de photo:', error);
      alert('Erreur lors de la capture de la photo. Veuillez réessayer.');
    }
  }

  private addPromotionOverlay(ctx: CanvasRenderingContext2D, width: number, height: number): void {
    // Fond semi-transparent pour le texte
    ctx.fillStyle = 'rgba(35, 37, 38, 0.8)';
    ctx.fillRect(0, height - 100, width, 100);

    // Texte principal "Quiz Promotion 2025"
    ctx.fillStyle = '#f6d365';
    ctx.font = 'bold 32px Arial, sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('🏆 Quiz Promotion 2025', width / 2, height - 60);

    // Date
    const now = new Date();
    ctx.font = '18px Arial, sans-serif';
    ctx.fillStyle = '#fff';
    ctx.fillText(now.toLocaleDateString('fr-FR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    }), width / 2, height - 25);

    // Décoration coins
    ctx.fillStyle = '#DAE72A';
    ctx.font = '24px Arial, sans-serif';
    ctx.textAlign = 'left';
    ctx.fillText('🌟', 20, height - 40);
    ctx.textAlign = 'right';
    ctx.fillText('🌟', width - 20, height - 40);
  }

  stopCamera(): void {
    if (this.cameraStream) {
      // Arrêter tous les tracks de la caméra
      this.cameraStream.getTracks().forEach(track => {
        track.stop();
      });
      this.cameraStream = null;
    }

    this.cameraActive = false;
    this.cameraReady = false;
    this.showCameraModal = false;
    this.photoTaken = false;
    console.log('✅ Caméra fermée');
  }

  getCurrentDate(): string {
    return new Date().toLocaleDateString('fr-FR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  }

  // ===== FIN MÉTHODES PHOTO DE GROUPE =====

  // Méthode de capture graphique du leaderboard final
  async captureLeaderboard(): Promise<void> {
    try {
      // Sélectionner un élément plus large incluant le titre
      const element = document.querySelector('.container-question');
      if (!element) {
        console.error('Élément container-question introuvable pour la capture');
        return;
      }

      // Configuration html2canvas pour un rendu optimal
      const canvas = await html2canvas(element as HTMLElement, {
        backgroundColor: '#F1F1F1',
        scale: 2, // Haute résolution
        useCORS: true,
        allowTaint: false,
        width: (element as HTMLElement).offsetWidth,
        height: (element as HTMLElement).offsetHeight,
        scrollX: 0,
        scrollY: 0,
        windowWidth: window.innerWidth,
        windowHeight: window.innerHeight,
        ignoreElements: (element) => {
          // Ignorer les boutons dans la capture
          return element.classList?.contains('step-final-buttons') || false;
        }
      });

      // Créer un contexte pour ajouter des informations supplémentaires
      const finalCanvas = document.createElement('canvas');
      const ctx = finalCanvas.getContext('2d');

      if (!ctx) return;

      // Dimensions du canvas final avec espace pour les métadonnées
      const padding = 40;
      const headerHeight = 60;
      const footerHeight = 40;
      finalCanvas.width = canvas.width + (padding * 2);
      finalCanvas.height = canvas.height + headerHeight + footerHeight + (padding * 2);

      // Fond du canvas final
      ctx.fillStyle = '#F1F1F1';
      ctx.fillRect(0, 0, finalCanvas.width, finalCanvas.height);

      // Header avec titre
      ctx.fillStyle = '#232526';
      ctx.font = 'bold 28px Arial, sans-serif';
      ctx.textAlign = 'center';
      ctx.fillText('🏆 Quiz Application - Final Results', finalCanvas.width / 2, 35);

      // Ligne de séparation
      ctx.strokeStyle = '#ddd';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(padding, headerHeight - 10);
      ctx.lineTo(finalCanvas.width - padding, headerHeight - 10);
      ctx.stroke();

      // Dessiner le leaderboard capturé
      ctx.drawImage(canvas, padding, headerHeight + padding);

      // Footer avec date et heure
      const now = new Date();
      ctx.font = '14px Arial, sans-serif';
      ctx.fillStyle = '#666';
      ctx.textAlign = 'center';
      ctx.fillText(`Generated on ${now.toLocaleString('fr-FR')}`, finalCanvas.width / 2, finalCanvas.height - 15);

      // Télécharger l'image
      const link = document.createElement('a');
      const timestamp = now.toISOString().replace(/[:.]/g, '-').split('T')[0];
      link.download = `quiz-final-results-${timestamp}.png`;
      link.href = finalCanvas.toDataURL('image/png', 0.95);
      link.click();

      console.log('✅ Capture du leaderboard réussie !');
    } catch (error) {
      console.error('❌ Erreur lors de la capture:', error);
    }
  }

  // Méthodes de gestion admin
  extendSession(): void {
    this.adminAuthService.extendSession();
  }

  logout(): void {
    if (confirm('Êtes-vous sûr de vouloir vous déconnecter ?')) {
      this.adminAuthService.logout();
      this.router.navigate(['/admin-login']);
    }
  }

  getRemainingTime(): string {
    return this.adminAuthService.getFormattedRemainingTime();
  }

  // Méthodes de restauration
  async onRestoreGame(): Promise<void> {
    if (!this.buttonsEnabled) return;

    // Attendre le temps minimum d'affichage du modal
    const elapsedTime = Date.now() - this.modalStartTime;
    if (elapsedTime < this.minModalDisplayTime) {
      await new Promise(resolve => setTimeout(resolve, this.minModalDisplayTime - elapsedTime));
    }

    try {
      console.log('🔄 Tentative de restauration de la partie...');

      const restored = await this.quizService.restoreGameState();
      if (restored) {
        this.showRestoreDialog = false;

        // Synchroniser l'état local avec l'état restauré
        this.participants = this.quizService.participants;

        // Récupérer l'étape actuelle du serveur
        try {
          const gameState = await this.quizService.getGameState();
          this.step = gameState?.step || 'lobby';

          // Si on est dans une question, synchroniser le timer
          if (this.step === 'question') {
            console.log('🕐 Restauration pendant une question, synchronisation du timer');
            await this.syncTimerWithServer();
          }

        } catch (error) {
          console.warn('Erreur lors de la récupération de l\'étape, utilisation de lobby par défaut');
          this.step = 'lobby';
        }

        console.log('✅ Partie restaurée avec succès !');

      } else {
        console.error('❌ Impossible de restaurer la partie');
        this.onStartNewGame();
      }
    } catch (error) {
      console.error('❌ Erreur lors de la restauration:', error);
      this.onStartNewGame();
    }
  }

  onStartNewGame(): void {
    if (!this.buttonsEnabled) return;

    // Attendre le temps minimum d'affichage du modal
    const elapsedTime = Date.now() - this.modalStartTime;
    if (elapsedTime < this.minModalDisplayTime) {
      setTimeout(() => {
        this.actuallyStartNewGame();
      }, this.minModalDisplayTime - elapsedTime);
    } else {
      this.actuallyStartNewGame();
    }
  }

  private actuallyStartNewGame(): void {
    console.log('🆕 Démarrage d\'une nouvelle partie');
    this.showRestoreDialog = false;

    // Effacer la sauvegarde précédente
    this.quizService.clearSavedGameState();

    // Initialiser une nouvelle partie
    this.initializeNewGame();
  }

  // Méthode pour afficher le nom des participants pour le débogage
  getParticipantNames(): string {
    if (!this.participants || this.participants.length === 0) return "Aucun";
    return this.participants.map(p => p.name).join(', ');
  }


  // Méthode pour vérifier directement les participants auprès du serveur
  async checkParticipantsDirectly(): Promise<void> {
    console.log('[DEBUG] Vérification directe des participants auprès du serveur...');
    try {
      const response = await fetch('http://localhost:3000/api/participants');
      const data = await response.json();
      
      if (Array.isArray(data)) {
        console.log(`[DEBUG] Participants récupérés directement: ${data.length}`);
        
        if (data.length > 0) {
          // Afficher les informations détaillées sur chaque participant
          console.log('[DEBUG] Liste des participants:');
          data.forEach((p, idx) => {
            console.log(`[DEBUG] ${idx+1}. ${p.name} (ID: ${p.id})`);
          });
          
          // Vérifier si certains participants sont absents de la liste locale
          const localIds = this.participants.map(p => String(p.id));
          const serverIds = data.map(p => String(p.id));
          
          const missingLocally = data.filter(p => !localIds.includes(String(p.id)));
          if (missingLocally.length > 0) {
            console.warn(`[DEBUG] ⚠️ ${missingLocally.length} participants sur le serveur mais absents localement:`, 
              missingLocally.map(p => p.name).join(', '));
          }
          
          const missingOnServer = this.participants.filter(p => !serverIds.includes(String(p.id)));
          if (missingOnServer.length > 0) {
            console.warn(`[DEBUG] ⚠️ ${missingOnServer.length} participants locaux mais absents du serveur:`, 
              missingOnServer.map(p => p.name).join(', '));
          }
          
          // Mettre à jour la liste locale avec les données du serveur
          this.participants = data;
          console.log('[DEBUG] ✅ Participants mis à jour:', this.participants.length);
          this.cdr.detectChanges();
        } else {
          console.warn('[DEBUG] ⚠️ Aucun participant trouvé sur le serveur');
        }
      } else {
        console.error('[DEBUG] ❌ Format de réponse invalide (pas un tableau)');
      }
    } catch (error) {
      console.error('[DEBUG] ❌ Erreur lors de la vérification directe des participants:', error);
    }
  }


  /**
   * Réinitialise uniquement les participants via l'API
   * Cette méthode est utilisée par restartGame() et d'autres fonctions
   */
  public async resetParticipants() {
    console.log('[RESET] Suppression des participants via API...');
    await this.quizService.resetParticipants();
    
    // Vider la liste locale immédiatement
    this.participants = [];
    this.cdr.detectChanges(); // Force l'UI à mettre à jour
    
    console.log('[RESET] Participants supprimés et interface mise à jour');
  }


  /**
   * Réinitialisation complète du quiz (étape, participants, index, réponses)
   * Cette méthode garantit que tous les joueurs sont bien supprimés partout
   */
  async restartGame() {
    if (!confirm('Êtes-vous sûr de vouloir réinitialiser complètement le quiz ? Cette action supprimera tous les participants et toutes les réponses.')) {
      return;
    }

    console.log('[RESET] Début de la réinitialisation du quiz');

    try {
      // Étape 1: Supprimer tous les participants
      console.log('[RESET] 1. Suppression des participants...');
      await this.quizService.resetParticipants();
      
      // Vider la liste locale immédiatement pour l'UI
      this.participants = [];
      this.leaderboard = [];
      this.cdr.detectChanges(); // Force l'UI à mettre à jour immédiatement
      
      console.log('[RESET] 1. ✅ Participants supprimés');

      // Étape 2: Réinitialiser toutes les réponses
      console.log('[RESET] 2. Reset des réponses...');
      await this.quizService.resetAllAnswers();
      console.log('[RESET] 2. ✅ Réponses supprimées');

      // Étape 3: Forcer le passage à l'étape "lobby"
      console.log('[RESET] 3. Passage forcé à l\'étape lobby...');
      // Double appel pour s'assurer de la propagation WebSocket
      await this.quizService.setStep('lobby');
      // Petit délai pour laisser le temps au WebSocket de traiter
      await new Promise(resolve => setTimeout(resolve, 500));
      await this.quizService.setStep('lobby'); // Second appel pour forcer
      console.log('[RESET] 3. ✅ Étape lobby définie et rediffusée');
      
      // Étape 4: Vérification de la suppression complète des participants
      console.log('[RESET] 4. Vérification des participants sur le serveur...');
      const participants = await this.quizService.fetchParticipantsFromServer();
      
      // Double vérification que la liste est bien vide
      if (participants && participants.length > 0) {
        console.error('[RESET] ⚠️ ATTENTION: Le serveur a retourné des participants après reset:', participants);
        // Forcer la liste vide localement pour être sûr
        this.participants = [];
        // Nouvelle tentative de reset côté serveur
        await this.quizService.resetParticipants();
      } else {
        console.log('[RESET] 4. ✅ Confirmation de liste vide:', participants?.length || 0);
        this.participants = [];
      }
      
      this.cdr.detectChanges();

      console.log('[INFO] Quiz reset via HTTP API');
      alert('Quiz réinitialisé. Tous les participants et réponses ont été supprimés.');

      // Étape 5: Réinitialisation de l'état local du composant
      console.log('[RESET] 5. Réinitialisation locale de l\'état...');
      this.step = 'lobby';
      this.currentIndex = 0;
      this.currentQuestion = null;
      this.answersCount = [];
      this.leaderboard = [];
      this.imageLoaded = false; // Reset image state
      this.resultImageLoaded = false; // Reset result image state
      
      // Vérification finale après un délai pour s'assurer que tout est vide
      setTimeout(async () => {
        const checkParticipants = await this.quizService.fetchParticipantsFromServer();
        console.log('[RESET] Vérification finale participants:', checkParticipants?.length || 0);
        if (checkParticipants && checkParticipants.length > 0) {
          console.warn('[RESET] ⚠️ Des participants existent encore après reset! Nouvelle tentative...');
          await this.quizService.resetParticipants();
          this.participants = [];
          this.cdr.detectChanges();
        }
      }, 2000);
      
      console.log('[RESET] 5. ✅ État local réinitialisé');
    } catch (error) {
      console.error('[RESET] ❌ Erreur lors de la réinitialisation:', error);
      alert('Une erreur est survenue lors de la réinitialisation. Veuillez réessayer.');
    }
  }
}
