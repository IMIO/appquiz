#!/usr/bin/env node

/**
 * Script pour ajouter des questions personnalis√©es √† la base SQLite
 * Usage: node add-questions.js
 */

const axios = require('axios');
const readline = require('readline');

const API_URL = 'http://localhost:3000/api';

// Interface pour saisie utilisateur
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise(resolve => {
    rl.question(prompt, resolve);
  });
}

// Vos questions originales d'accessibilit√© web
const questionsFirebase = [
  {
    id: 1,
    text: "Quelle est une bonne pratique pour rendre un filtre ou un menu accessible au clavier ?",
    options: [
      "Utiliser des raccourcis clavier sp√©cifiques uniquement pour les utilisateurs avanc√©s",
      "S'assurer que l'utilisateur peut naviguer avec la touche Tab et activer avec Entr√©e/Espace",
      "Rendre le menu invisible pour les lecteurs d'√©cran",
      "Ajouter un script qui simule les clics de souris automatiquement"
    ],
    correctIndex: 1
  },
  {
    id: 2,
    text: "Pourquoi faut-il utiliser un bouton plut√¥t qu'un lien dans certains cas ?",
    options: [
      "Parce qu'un bouton permet de d√©clencher une action comme soumettre un formulaire",
      "Parce qu'un bouton am√©liore la vitesse de chargement de la page",
      "Parce qu'un bouton est plus simple √† traduire que les liens",
      "Parce qu'un bouton est toujours mieux r√©f√©renc√© par Google"
    ],
    correctIndex: 0
  },
  {
    id: 3,
    text: "Pourquoi ajoute-t-on des aria-label aux √©l√©ments comme un logo ou un bouton ?",
    options: [
      "Pour donner une description claire aux technologies d'assistance (lecteurs d'√©cran)",
      "Pour √©viter que les √©l√©ments soient index√©s par les moteurs de recherche",
      "Pour permettre au CSS d'ajouter automatiquement des styles dynamiques",
      "Pour remplacer l'attribut alt des images d√©coratives"
    ],
    correctIndex: 0
  },
  {
    id: 4,
    text: "Quelle est la bonne pratique lorsqu'un lien ouvre une nouvelle fen√™tre ou un nouvel onglet (target=\"_blank\") ?",
    options: [
      "Pr√©venir l'utilisateur via un attribut title ou un indicateur visuel",
      "Masquer le lien aux utilisateurs de lecteurs d'√©cran",
      "Forcer tous les liens √† s'ouvrir en mode impression",
      "Ajouter un mot-cl√© SEO sp√©cial dans l'URL"
    ],
    correctIndex: 0
  },
  {
    id: 5,
    text: "Quelle est la bonne pratique concernant l'attribut alt des images ?",
    options: [
      "D√©crire bri√®vement l'image si elle apporte une information, sinon laisser vide si elle est purement d√©corative",
      "Ajouter un alt identique pour toutes les images d'un site",
      "Indiquer le nom du photographe syst√©matiquement",
      "Mettre des hashtags ou mots-cl√©s SEO dans le champ alt"
    ],
    correctIndex: 0
  },
  {
    id: 6,
    text: "Comment am√©liorer l'accessibilit√© d'une vid√©o int√©gr√©e via une iframe ?",
    options: [
      "Ajouter un attribut title indiquant la source ou le contenu",
      "Forcer l'autoplay avec le son activ√©",
      "Supprimer les contr√¥les pour simplifier l'exp√©rience",
      "Ajouter un lien cach√© vers un site externe non li√©"
    ],
    correctIndex: 0
  },
  {
    id: 7,
    text: "Pourquoi est-il important que les mentions l√©gales, infos accessibilit√© et copyright soient pr√©sentes dans le colophon (footer) ?",
    options: [
      "Pour respecter les obligations l√©gales et garantir l'acc√®s rapide √† ces informations essentielles",
      "Pour √©viter que le site soit bloqu√© par les bloqueurs de pub",
      "Pour que les utilisateurs puissent naviguer sans utiliser la barre de recherche",
      "Pour r√©duire le nombre de pages vues et simplifier les statistiques"
    ],
    correctIndex: 0
  },
  {
    id: 8,
    text: "Quelle est la bonne pratique pour rendre des boutons de consentement accessibles ?",
    options: [
      "Leur donner un aria-label clair d√©crivant l'action",
      "Masquer les boutons de refus pour √©viter les confusions",
      "Ajouter uniquement une couleur contrast√©e sans texte",
      "Supprimer les boutons apr√®s un d√©lai court"
    ],
    correctIndex: 0
  },
  {
    id: 9,
    text: "Pourquoi traduire les aria-labels en plusieurs langues (FR/DE/NL) ?",
    options: [
      "Parce que les lecteurs d'√©cran doivent restituer l'information dans la langue de l'utilisateur",
      "Parce que Chrome bloque l'affichage des labels non traduits",
      "Parce que cela permet d'activer automatiquement le mode \"voix off\"",
      "Parce que sans traduction, les labels ne s'affichent pas sur mobile"
    ],
    correctIndex: 0
  },
  {
    id: 10,
    text: "Pourquoi est-il important d'utiliser correctement les attributs de navigation (<nav>, role=\"navigation\", etc.) ?",
    options: [
      "Pour permettre aux technologies d'assistance de comprendre et d'annoncer la structure de la page",
      "Pour emp√™cher les moteurs de recherche d'indexer la navigation",
      "Pour r√©duire le temps de chargement de la page",
      "Pour forcer l'utilisation du clavier uniquement"
    ],
    correctIndex: 0
  }
];

async function addQuestionToServer(question) {
  try {
    const response = await axios.post(`${API_URL}/questions`, question, {
      headers: { 'Content-Type': 'application/json' }
    });
    console.log(`‚úÖ Question ajout√©e: "${question.text}"`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Erreur ajout question: ${error.message}`);
    return null;
  }
}

async function getCurrentQuestions() {
  try {
    const response = await axios.get(`${API_URL}/questions`);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration questions:', error.message);
    return [];
  }
}

async function resetQuestions() {
  try {
    // Reset complet
    await axios.post(`${API_URL}/quiz/reset`);
    console.log('‚úÖ Questions et quiz reset');
  } catch (error) {
    console.error('‚ùå Erreur reset:', error.message);
  }
}

async function main() {
  console.log('üéØ Script d\'ajout de questions personnalis√©es\n');
  
  // V√©rifier la connexion au serveur
  try {
    await axios.get(`${API_URL}/questions`);
    console.log('‚úÖ Connexion au serveur OK\n');
  } catch (error) {
    console.error('‚ùå Serveur non accessible. Assurez-vous que le serveur SQLite est d√©marr√©.');
    console.error('   Commande: node server.js');
    process.exit(1);
  }

  const currentQuestions = await getCurrentQuestions();
  console.log(`üìö Questions actuelles: ${currentQuestions.length}`);
  currentQuestions.forEach((q, i) => {
    console.log(`   ${i+1}. ${q.text}`);
  });

  console.log('\nüîÑ Options:');
  console.log('1. Remplacer par les questions Firebase de base');
  console.log('2. Ajouter une nouvelle question manuellement');
  console.log('3. Reset complet et ajouter questions Firebase');
  console.log('4. Quitter');

  const choice = await question('\nVotre choix (1-4): ');

  switch (choice) {
    case '1':
      console.log('\nüìù Ajout des questions Firebase...');
      for (const q of questionsFirebase) {
        await addQuestionToServer(q);
      }
      break;

    case '2':
      console.log('\nüìù Ajout d\'une nouvelle question:');
      const id = parseInt(await question('ID de la question: ')) || (currentQuestions.length + 1);
      const text = await question('Texte de la question: ');
      
      console.log('Options (s√©parez par des virgules):');
      const optionsStr = await question('Entrez les options: ');
      const options = optionsStr.split(',').map(opt => opt.trim());
      
      const correctIndex = parseInt(await question('Index de la bonne r√©ponse (0-based): ')) || 0;
      
      const newQuestion = { id, text, options, correctIndex };
      await addQuestionToServer(newQuestion);
      break;

    case '3':
      console.log('\nüîÑ Reset complet et ajout questions Firebase...');
      await resetQuestions();
      
      // Attendre un peu pour que le reset soit effectif
      setTimeout(async () => {
        for (const q of questionsFirebase) {
          await addQuestionToServer(q);
        }
      }, 1000);
      break;

    case '4':
      console.log('üëã Au revoir!');
      break;

    default:
      console.log('‚ùå Choix invalide');
  }

  rl.close();
}

// Gestion des erreurs
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur:', error.message);
  process.exit(1);
});

if (require.main === module) {
  main();
}

module.exports = { addQuestionToServer, questionsFirebase };